#comments-start
	/* AutoIT implementation of Bruce Schneier's card cipher, "Solitaire"
	* by Sachin R <sachinr@escanav.com>, 2016
	*/

	/*
	* This program is free software; you can redistribute it and/or modify
	* it under the terms of the GNU General Public License as published by
	* the Free Software Foundation; either version 2 of the License, or
	* (at your option) any later version.
	*
	* This program is distributed in the hope that it will be useful,
	* but WITHOUT ANY WARRANTY; without even the implied warranty of
	* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	* GNU General Public License for more details.
	*
	* You should have received a copy of the GNU General Public License
	* along with this program; if not, write to the Free Software
	* Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
	*
	*/

#comments-end

#cs ----------------------------------------------------------------------------

	AutoIt Version	: 3.3.12.0
	Author			: Sachin R <sachinr@escanav.com>

	Created		: 28/04/2016

	Script Function:
	Its an implementation of Solitaire Cipher as per the specifications mentioned in the site
	https://www.schneier.com/cryptography/solitaire/

	Additionally, The DeckID generation is basically a compression algorithm for Numerals.
	It converts 9 Digit numbers into 6 Characters (Case-Sensetive).

	Break-up of 9 Digits: 7 Digits for the Deck Number and 2 Digits for the Suit Number (Between 1-24)
	Break-up of 7 Digits: 3 Digits between 1-720 and 4 Digits between 1-5040

	Usage:

	Solitaire_Encrypt_Process($number, $nDeckNo, $sPlainText, $sPassPhrase)
	$number			= 7 Digit Random Number (Random between 1 AND 720 , Random between 1 and 5040 , inclusive)
	$nDeckNo		= 2 Digit Deck Number (Random between 01 and 24 , inclusive)
	$sPlainText		= The text to be encrypted , Alphabets A-Z allowed
	$sPassPhrase	= The PassPhrase used for shuffling cards

	Solitaire_Decrypt_Process($sSolitaire_Chipher, $sPassPhrase)
	$sSolitaire_Chipher	= The generated Encrypted String
	$sPassPhrase		= The PassPhrase used while encrypting the Encrypted String

#ce ----------------------------------------------------------------------------

#include <FileConstants.au3>
#include <array.au3>
#include <MultidimensionalSearch.au3>
Dim $aTable100[2][50] = [ _
		["00", "01", "02", "03", "04", "05", "06", "07", "08", "09", _
		"10", "11", "12", "13", "14", "15", "16", "17", "18", "19", _
		"20", "21", "22", "23", "24", "25", "26", "27", "28", "29", _
		"30", "31", "32", "33", "34", "35", "36", "37", "38", "39", _
		"40", "41", "42", "43", "44", "45", "46", "47", "48", "49"], _
		["50", "51", "52", "53", "54", "55", "56", "57", "58", "59", _
		"60", "61", "62", "63", "64", "65", "66", "67", "68", "69", _
		"70", "71", "72", "73", "74", "75", "76", "77", "78", "79", _
		"80", "81", "82", "83", "84", "85", "86", "87", "88", "89", _
		"90", "91", "92", "93", "94", "95", "96", "97", "98", "99"] _
		]
Dim $aTableAlpha[50] = [ _
		"A", "B", "C", "D", "E", _
		"F", "G", "H", "I", "J", _
		"K", "L", "M", "N", "O", _
		"P", "Q", "R", "S", "T", _
		"U", "V", "W", "X", "Y", _
		"a", "b", "c", "d", "e", _
		"f", "g", "h", "i", "j", _
		"k", "l", "m", "n", "o", _
		"p", "q", "r", "s", "t", _
		"u", "v", "w", "x", "y" _
		]

Dim $aTableBin[16] = [ _
		"0000", "0001", "0010", "0011", _
		"0100", "0101", "0110", "0111", _
		"1000", "1001", "1010", "1011", _
		"1100", "1101", "1110", "1111" _
		]

Dim $aTableDeckA[721] = ["720", _
		"ABCDEF", "ABCDFE", "ABCEDF", "ABCEFD", "ABCFDE", "ABCFED", "ABDCEF", "ABDCFE", "ABDECF", "ABDEFC", "ABDFCE", "ABDFEC", "ABECDF", "ABECFD", "ABEDCF", "ABEDFC", "ABEFCD", _
		"ABEFDC", "ABFCDE", "ABFCED", "ABFDCE", "ABFDEC", "ABFECD", "ABFEDC", "ACBDEF", "ACBDFE", "ACBEDF", "ACBEFD", "ACBFDE", "ACBFED", "ACDBEF", "ACDBFE", "ACDEBF", "ACDEFB", _
		"ACDFBE", "ACDFEB", "ACEBDF", "ACEBFD", "ACEDBF", "ACEDFB", "ACEFBD", "ACEFDB", "ACFBDE", "ACFBED", "ACFDBE", "ACFDEB", "ACFEBD", "ACFEDB", "ADBCEF", "ADBCFE", "ADBECF", _
		"ADBEFC", "ADBFCE", "ADBFEC", "ADCBEF", "ADCBFE", "ADCEBF", "ADCEFB", "ADCFBE", "ADCFEB", "ADEBCF", "ADEBFC", "ADECBF", "ADECFB", "ADEFBC", "ADEFCB", "ADFBCE", "ADFBEC", _
		"ADFCBE", "ADFCEB", "ADFEBC", "ADFECB", "AEBCDF", "AEBCFD", "AEBDCF", "AEBDFC", "AEBFCD", "AEBFDC", "AECBDF", "AECBFD", "AECDBF", "AECDFB", "AECFBD", "AECFDB", "AEDBCF", _
		"AEDBFC", "AEDCBF", "AEDCFB", "AEDFBC", "AEDFCB", "AEFBCD", "AEFBDC", "AEFCBD", "AEFCDB", "AEFDBC", "AEFDCB", "AFBCDE", "AFBCED", "AFBDCE", "AFBDEC", "AFBECD", "AFBEDC", _
		"AFCBDE", "AFCBED", "AFCDBE", "AFCDEB", "AFCEBD", "AFCEDB", "AFDBCE", "AFDBEC", "AFDCBE", "AFDCEB", "AFDEBC", "AFDECB", "AFEBCD", "AFEBDC", "AFECBD", "AFECDB", "AFEDBC", _
		"AFEDCB", "BACDEF", "BACDFE", "BACEDF", "BACEFD", "BACFDE", "BACFED", "BADCEF", "BADCFE", "BADECF", "BADEFC", "BADFCE", "BADFEC", "BAECDF", "BAECFD", "BAEDCF", "BAEDFC", _
		"BAEFCD", "BAEFDC", "BAFCDE", "BAFCED", "BAFDCE", "BAFDEC", "BAFECD", "BAFEDC", "BCADEF", "BCADFE", "BCAEDF", "BCAEFD", "BCAFDE", "BCAFED", "BCDAEF", "BCDAFE", "BCDEAF", _
		"BCDEFA", "BCDFAE", "BCDFEA", "BCEADF", "BCEAFD", "BCEDAF", "BCEDFA", "BCEFAD", "BCEFDA", "BCFADE", "BCFAED", "BCFDAE", "BCFDEA", "BCFEAD", "BCFEDA", "BDACEF", "BDACFE", _
		"BDAECF", "BDAEFC", "BDAFCE", "BDAFEC", "BDCAEF", "BDCAFE", "BDCEAF", "BDCEFA", "BDCFAE", "BDCFEA", "BDEACF", "BDEAFC", "BDECAF", "BDECFA", "BDEFAC", "BDEFCA", "BDFACE", _
		"BDFAEC", "BDFCAE", "BDFCEA", "BDFEAC", "BDFECA", "BEACDF", "BEACFD", "BEADCF", "BEADFC", "BEAFCD", "BEAFDC", "BECADF", "BECAFD", "BECDAF", "BECDFA", "BECFAD", "BECFDA", _
		"BEDACF", "BEDAFC", "BEDCAF", "BEDCFA", "BEDFAC", "BEDFCA", "BEFACD", "BEFADC", "BEFCAD", "BEFCDA", "BEFDAC", "BEFDCA", "BFACDE", "BFACED", "BFADCE", "BFADEC", "BFAECD", _
		"BFAEDC", "BFCADE", "BFCAED", "BFCDAE", "BFCDEA", "BFCEAD", "BFCEDA", "BFDACE", "BFDAEC", "BFDCAE", "BFDCEA", "BFDEAC", "BFDECA", "BFEACD", "BFEADC", "BFECAD", "BFECDA", _
		"BFEDAC", "BFEDCA", "CABDEF", "CABDFE", "CABEDF", "CABEFD", "CABFDE", "CABFED", "CADBEF", "CADBFE", "CADEBF", "CADEFB", "CADFBE", "CADFEB", "CAEBDF", "CAEBFD", "CAEDBF", _
		"CAEDFB", "CAEFBD", "CAEFDB", "CAFBDE", "CAFBED", "CAFDBE", "CAFDEB", "CAFEBD", "CAFEDB", "CBADEF", "CBADFE", "CBAEDF", "CBAEFD", "CBAFDE", "CBAFED", "CBDAEF", "CBDAFE", _
		"CBDEAF", "CBDEFA", "CBDFAE", "CBDFEA", "CBEADF", "CBEAFD", "CBEDAF", "CBEDFA", "CBEFAD", "CBEFDA", "CBFADE", "CBFAED", "CBFDAE", "CBFDEA", "CBFEAD", "CBFEDA", "CDABEF", _
		"CDABFE", "CDAEBF", "CDAEFB", "CDAFBE", "CDAFEB", "CDBAEF", "CDBAFE", "CDBEAF", "CDBEFA", "CDBFAE", "CDBFEA", "CDEABF", "CDEAFB", "CDEBAF", "CDEBFA", "CDEFAB", "CDEFBA", _
		"CDFABE", "CDFAEB", "CDFBAE", "CDFBEA", "CDFEAB", "CDFEBA", "CEABDF", "CEABFD", "CEADBF", "CEADFB", "CEAFBD", "CEAFDB", "CEBADF", "CEBAFD", "CEBDAF", "CEBDFA", "CEBFAD", _
		"CEBFDA", "CEDABF", "CEDAFB", "CEDBAF", "CEDBFA", "CEDFAB", "CEDFBA", "CEFABD", "CEFADB", "CEFBAD", "CEFBDA", "CEFDAB", "CEFDBA", "CFABDE", "CFABED", "CFADBE", "CFADEB", _
		"CFAEBD", "CFAEDB", "CFBADE", "CFBAED", "CFBDAE", "CFBDEA", "CFBEAD", "CFBEDA", "CFDABE", "CFDAEB", "CFDBAE", "CFDBEA", "CFDEAB", "CFDEBA", "CFEABD", "CFEADB", "CFEBAD", _
		"CFEBDA", "CFEDAB", "CFEDBA", "DABCEF", "DABCFE", "DABECF", "DABEFC", "DABFCE", "DABFEC", "DACBEF", "DACBFE", "DACEBF", "DACEFB", "DACFBE", "DACFEB", "DAEBCF", "DAEBFC", _
		"DAECBF", "DAECFB", "DAEFBC", "DAEFCB", "DAFBCE", "DAFBEC", "DAFCBE", "DAFCEB", "DAFEBC", "DAFECB", "DBACEF", "DBACFE", "DBAECF", "DBAEFC", "DBAFCE", "DBAFEC", "DBCAEF", _
		"DBCAFE", "DBCEAF", "DBCEFA", "DBCFAE", "DBCFEA", "DBEACF", "DBEAFC", "DBECAF", "DBECFA", "DBEFAC", "DBEFCA", "DBFACE", "DBFAEC", "DBFCAE", "DBFCEA", "DBFEAC", "DBFECA", _
		"DCABEF", "DCABFE", "DCAEBF", "DCAEFB", "DCAFBE", "DCAFEB", "DCBAEF", "DCBAFE", "DCBEAF", "DCBEFA", "DCBFAE", "DCBFEA", "DCEABF", "DCEAFB", "DCEBAF", "DCEBFA", "DCEFAB", _
		"DCEFBA", "DCFABE", "DCFAEB", "DCFBAE", "DCFBEA", "DCFEAB", "DCFEBA", "DEABCF", "DEABFC", "DEACBF", "DEACFB", "DEAFBC", "DEAFCB", "DEBACF", "DEBAFC", "DEBCAF", "DEBCFA", _
		"DEBFAC", "DEBFCA", "DECABF", "DECAFB", "DECBAF", "DECBFA", "DECFAB", "DECFBA", "DEFABC", "DEFACB", "DEFBAC", "DEFBCA", "DEFCAB", "DEFCBA", "DFABCE", "DFABEC", "DFACBE", _
		"DFACEB", "DFAEBC", "DFAECB", "DFBACE", "DFBAEC", "DFBCAE", "DFBCEA", "DFBEAC", "DFBECA", "DFCABE", "DFCAEB", "DFCBAE", "DFCBEA", "DFCEAB", "DFCEBA", "DFEABC", "DFEACB", _
		"DFEBAC", "DFEBCA", "DFECAB", "DFECBA", "EABCDF", "EABCFD", "EABDCF", "EABDFC", "EABFCD", "EABFDC", "EACBDF", "EACBFD", "EACDBF", "EACDFB", "EACFBD", "EACFDB", "EADBCF", _
		"EADBFC", "EADCBF", "EADCFB", "EADFBC", "EADFCB", "EAFBCD", "EAFBDC", "EAFCBD", "EAFCDB", "EAFDBC", "EAFDCB", "EBACDF", "EBACFD", "EBADCF", "EBADFC", "EBAFCD", "EBAFDC", _
		"EBCADF", "EBCAFD", "EBCDAF", "EBCDFA", "EBCFAD", "EBCFDA", "EBDACF", "EBDAFC", "EBDCAF", "EBDCFA", "EBDFAC", "EBDFCA", "EBFACD", "EBFADC", "EBFCAD", "EBFCDA", "EBFDAC", _
		"EBFDCA", "ECABDF", "ECABFD", "ECADBF", "ECADFB", "ECAFBD", "ECAFDB", "ECBADF", "ECBAFD", "ECBDAF", "ECBDFA", "ECBFAD", "ECBFDA", "ECDABF", "ECDAFB", "ECDBAF", "ECDBFA", _
		"ECDFAB", "ECDFBA", "ECFABD", "ECFADB", "ECFBAD", "ECFBDA", "ECFDAB", "ECFDBA", "EDABCF", "EDABFC", "EDACBF", "EDACFB", "EDAFBC", "EDAFCB", "EDBACF", "EDBAFC", "EDBCAF", _
		"EDBCFA", "EDBFAC", "EDBFCA", "EDCABF", "EDCAFB", "EDCBAF", "EDCBFA", "EDCFAB", "EDCFBA", "EDFABC", "EDFACB", "EDFBAC", "EDFBCA", "EDFCAB", "EDFCBA", "EFABCD", "EFABDC", _
		"EFACBD", "EFACDB", "EFADBC", "EFADCB", "EFBACD", "EFBADC", "EFBCAD", "EFBCDA", "EFBDAC", "EFBDCA", "EFCABD", "EFCADB", "EFCBAD", "EFCBDA", "EFCDAB", "EFCDBA", "EFDABC", _
		"EFDACB", "EFDBAC", "EFDBCA", "EFDCAB", "EFDCBA", "FABCDE", "FABCED", "FABDCE", "FABDEC", "FABECD", "FABEDC", "FACBDE", "FACBED", "FACDBE", "FACDEB", "FACEBD", "FACEDB", _
		"FADBCE", "FADBEC", "FADCBE", "FADCEB", "FADEBC", "FADECB", "FAEBCD", "FAEBDC", "FAECBD", "FAECDB", "FAEDBC", "FAEDCB", "FBACDE", "FBACED", "FBADCE", "FBADEC", "FBAECD", _
		"FBAEDC", "FBCADE", "FBCAED", "FBCDAE", "FBCDEA", "FBCEAD", "FBCEDA", "FBDACE", "FBDAEC", "FBDCAE", "FBDCEA", "FBDEAC", "FBDECA", "FBEACD", "FBEADC", "FBECAD", "FBECDA", _
		"FBEDAC", "FBEDCA", "FCABDE", "FCABED", "FCADBE", "FCADEB", "FCAEBD", "FCAEDB", "FCBADE", "FCBAED", "FCBDAE", "FCBDEA", "FCBEAD", "FCBEDA", "FCDABE", "FCDAEB", "FCDBAE", _
		"FCDBEA", "FCDEAB", "FCDEBA", "FCEABD", "FCEADB", "FCEBAD", "FCEBDA", "FCEDAB", "FCEDBA", "FDABCE", "FDABEC", "FDACBE", "FDACEB", "FDAEBC", "FDAECB", "FDBACE", "FDBAEC", _
		"FDBCAE", "FDBCEA", "FDBEAC", "FDBECA", "FDCABE", "FDCAEB", "FDCBAE", "FDCBEA", "FDCEAB", "FDCEBA", "FDEABC", "FDEACB", "FDEBAC", "FDEBCA", "FDECAB", "FDECBA", "FEABCD", _
		"FEABDC", "FEACBD", "FEACDB", "FEADBC", "FEADCB", "FEBACD", "FEBADC", "FEBCAD", "FEBCDA", "FEBDAC", "FEBDCA", "FECABD", "FECADB", "FECBAD", "FECBDA", "FECDAB", "FECDBA", _
		"FEDABC", "FEDACB", "FEDBAC", "FEDBCA", "FEDCAB", "FEDCBA"]

Dim $aTableDeckB[5041] = ["5040", _
		"GHIJKLM", "GHIJKML", "GHIJLKM", "GHIJLMK", "GHIJMKL", "GHIJMLK", "GHIKJLM", "GHIKJML", "GHIKLJM", "GHIKLMJ", "GHIKMJL", "GHIKMLJ", "GHILJKM", "GHILJMK", "GHILKJM", _
		"GHILKMJ", "GHILMJK", "GHILMKJ", "GHIMJKL", "GHIMJLK", "GHIMKJL", "GHIMKLJ", "GHIMLJK", "GHIMLKJ", "GHJIKLM", "GHJIKML", "GHJILKM", "GHJILMK", "GHJIMKL", "GHJIMLK", _
		"GHJKILM", "GHJKIML", "GHJKLIM", "GHJKLMI", "GHJKMIL", "GHJKMLI", "GHJLIKM", "GHJLIMK", "GHJLKIM", "GHJLKMI", "GHJLMIK", "GHJLMKI", "GHJMIKL", "GHJMILK", "GHJMKIL", _
		"GHJMKLI", "GHJMLIK", "GHJMLKI", "GHKIJLM", "GHKIJML", "GHKILJM", "GHKILMJ", "GHKIMJL", "GHKIMLJ", "GHKJILM", "GHKJIML", "GHKJLIM", "GHKJLMI", "GHKJMIL", "GHKJMLI", _
		"GHKLIJM", "GHKLIMJ", "GHKLJIM", "GHKLJMI", "GHKLMIJ", "GHKLMJI", "GHKMIJL", "GHKMILJ", "GHKMJIL", "GHKMJLI", "GHKMLIJ", "GHKMLJI", "GHLIJKM", "GHLIJMK", "GHLIKJM", _
		"GHLIKMJ", "GHLIMJK", "GHLIMKJ", "GHLJIKM", "GHLJIMK", "GHLJKIM", "GHLJKMI", "GHLJMIK", "GHLJMKI", "GHLKIJM", "GHLKIMJ", "GHLKJIM", "GHLKJMI", "GHLKMIJ", "GHLKMJI", _
		"GHLMIJK", "GHLMIKJ", "GHLMJIK", "GHLMJKI", "GHLMKIJ", "GHLMKJI", "GHMIJKL", "GHMIJLK", "GHMIKJL", "GHMIKLJ", "GHMILJK", "GHMILKJ", "GHMJIKL", "GHMJILK", "GHMJKIL", _
		"GHMJKLI", "GHMJLIK", "GHMJLKI", "GHMKIJL", "GHMKILJ", "GHMKJIL", "GHMKJLI", "GHMKLIJ", "GHMKLJI", "GHMLIJK", "GHMLIKJ", "GHMLJIK", "GHMLJKI", "GHMLKIJ", "GHMLKJI", _
		"GIHJKLM", "GIHJKML", "GIHJLKM", "GIHJLMK", "GIHJMKL", "GIHJMLK", "GIHKJLM", "GIHKJML", "GIHKLJM", "GIHKLMJ", "GIHKMJL", "GIHKMLJ", "GIHLJKM", "GIHLJMK", "GIHLKJM", _
		"GIHLKMJ", "GIHLMJK", "GIHLMKJ", "GIHMJKL", "GIHMJLK", "GIHMKJL", "GIHMKLJ", "GIHMLJK", "GIHMLKJ", "GIJHKLM", "GIJHKML", "GIJHLKM", "GIJHLMK", "GIJHMKL", "GIJHMLK", _
		"GIJKHLM", "GIJKHML", "GIJKLHM", "GIJKLMH", "GIJKMHL", "GIJKMLH", "GIJLHKM", "GIJLHMK", "GIJLKHM", "GIJLKMH", "GIJLMHK", "GIJLMKH", "GIJMHKL", "GIJMHLK", "GIJMKHL", _
		"GIJMKLH", "GIJMLHK", "GIJMLKH", "GIKHJLM", "GIKHJML", "GIKHLJM", "GIKHLMJ", "GIKHMJL", "GIKHMLJ", "GIKJHLM", "GIKJHML", "GIKJLHM", "GIKJLMH", "GIKJMHL", "GIKJMLH", _
		"GIKLHJM", "GIKLHMJ", "GIKLJHM", "GIKLJMH", "GIKLMHJ", "GIKLMJH", "GIKMHJL", "GIKMHLJ", "GIKMJHL", "GIKMJLH", "GIKMLHJ", "GIKMLJH", "GILHJKM", "GILHJMK", "GILHKJM", _
		"GILHKMJ", "GILHMJK", "GILHMKJ", "GILJHKM", "GILJHMK", "GILJKHM", "GILJKMH", "GILJMHK", "GILJMKH", "GILKHJM", "GILKHMJ", "GILKJHM", "GILKJMH", "GILKMHJ", "GILKMJH", _
		"GILMHJK", "GILMHKJ", "GILMJHK", "GILMJKH", "GILMKHJ", "GILMKJH", "GIMHJKL", "GIMHJLK", "GIMHKJL", "GIMHKLJ", "GIMHLJK", "GIMHLKJ", "GIMJHKL", "GIMJHLK", "GIMJKHL", _
		"GIMJKLH", "GIMJLHK", "GIMJLKH", "GIMKHJL", "GIMKHLJ", "GIMKJHL", "GIMKJLH", "GIMKLHJ", "GIMKLJH", "GIMLHJK", "GIMLHKJ", "GIMLJHK", "GIMLJKH", "GIMLKHJ", "GIMLKJH", _
		"GJHIKLM", "GJHIKML", "GJHILKM", "GJHILMK", "GJHIMKL", "GJHIMLK", "GJHKILM", "GJHKIML", "GJHKLIM", "GJHKLMI", "GJHKMIL", "GJHKMLI", "GJHLIKM", "GJHLIMK", "GJHLKIM", _
		"GJHLKMI", "GJHLMIK", "GJHLMKI", "GJHMIKL", "GJHMILK", "GJHMKIL", "GJHMKLI", "GJHMLIK", "GJHMLKI", "GJIHKLM", "GJIHKML", "GJIHLKM", "GJIHLMK", "GJIHMKL", "GJIHMLK", _
		"GJIKHLM", "GJIKHML", "GJIKLHM", "GJIKLMH", "GJIKMHL", "GJIKMLH", "GJILHKM", "GJILHMK", "GJILKHM", "GJILKMH", "GJILMHK", "GJILMKH", "GJIMHKL", "GJIMHLK", "GJIMKHL", _
		"GJIMKLH", "GJIMLHK", "GJIMLKH", "GJKHILM", "GJKHIML", "GJKHLIM", "GJKHLMI", "GJKHMIL", "GJKHMLI", "GJKIHLM", "GJKIHML", "GJKILHM", "GJKILMH", "GJKIMHL", "GJKIMLH", _
		"GJKLHIM", "GJKLHMI", "GJKLIHM", "GJKLIMH", "GJKLMHI", "GJKLMIH", "GJKMHIL", "GJKMHLI", "GJKMIHL", "GJKMILH", "GJKMLHI", "GJKMLIH", "GJLHIKM", "GJLHIMK", "GJLHKIM", _
		"GJLHKMI", "GJLHMIK", "GJLHMKI", "GJLIHKM", "GJLIHMK", "GJLIKHM", "GJLIKMH", "GJLIMHK", "GJLIMKH", "GJLKHIM", "GJLKHMI", "GJLKIHM", "GJLKIMH", "GJLKMHI", "GJLKMIH", _
		"GJLMHIK", "GJLMHKI", "GJLMIHK", "GJLMIKH", "GJLMKHI", "GJLMKIH", "GJMHIKL", "GJMHILK", "GJMHKIL", "GJMHKLI", "GJMHLIK", "GJMHLKI", "GJMIHKL", "GJMIHLK", "GJMIKHL", _
		"GJMIKLH", "GJMILHK", "GJMILKH", "GJMKHIL", "GJMKHLI", "GJMKIHL", "GJMKILH", "GJMKLHI", "GJMKLIH", "GJMLHIK", "GJMLHKI", "GJMLIHK", "GJMLIKH", "GJMLKHI", "GJMLKIH", _
		"GKHIJLM", "GKHIJML", "GKHILJM", "GKHILMJ", "GKHIMJL", "GKHIMLJ", "GKHJILM", "GKHJIML", "GKHJLIM", "GKHJLMI", "GKHJMIL", "GKHJMLI", "GKHLIJM", "GKHLIMJ", "GKHLJIM", _
		"GKHLJMI", "GKHLMIJ", "GKHLMJI", "GKHMIJL", "GKHMILJ", "GKHMJIL", "GKHMJLI", "GKHMLIJ", "GKHMLJI", "GKIHJLM", "GKIHJML", "GKIHLJM", "GKIHLMJ", "GKIHMJL", "GKIHMLJ", _
		"GKIJHLM", "GKIJHML", "GKIJLHM", "GKIJLMH", "GKIJMHL", "GKIJMLH", "GKILHJM", "GKILHMJ", "GKILJHM", "GKILJMH", "GKILMHJ", "GKILMJH", "GKIMHJL", "GKIMHLJ", "GKIMJHL", _
		"GKIMJLH", "GKIMLHJ", "GKIMLJH", "GKJHILM", "GKJHIML", "GKJHLIM", "GKJHLMI", "GKJHMIL", "GKJHMLI", "GKJIHLM", "GKJIHML", "GKJILHM", "GKJILMH", "GKJIMHL", "GKJIMLH", _
		"GKJLHIM", "GKJLHMI", "GKJLIHM", "GKJLIMH", "GKJLMHI", "GKJLMIH", "GKJMHIL", "GKJMHLI", "GKJMIHL", "GKJMILH", "GKJMLHI", "GKJMLIH", "GKLHIJM", "GKLHIMJ", "GKLHJIM", _
		"GKLHJMI", "GKLHMIJ", "GKLHMJI", "GKLIHJM", "GKLIHMJ", "GKLIJHM", "GKLIJMH", "GKLIMHJ", "GKLIMJH", "GKLJHIM", "GKLJHMI", "GKLJIHM", "GKLJIMH", "GKLJMHI", "GKLJMIH", _
		"GKLMHIJ", "GKLMHJI", "GKLMIHJ", "GKLMIJH", "GKLMJHI", "GKLMJIH", "GKMHIJL", "GKMHILJ", "GKMHJIL", "GKMHJLI", "GKMHLIJ", "GKMHLJI", "GKMIHJL", "GKMIHLJ", "GKMIJHL", _
		"GKMIJLH", "GKMILHJ", "GKMILJH", "GKMJHIL", "GKMJHLI", "GKMJIHL", "GKMJILH", "GKMJLHI", "GKMJLIH", "GKMLHIJ", "GKMLHJI", "GKMLIHJ", "GKMLIJH", "GKMLJHI", "GKMLJIH", _
		"GLHIJKM", "GLHIJMK", "GLHIKJM", "GLHIKMJ", "GLHIMJK", "GLHIMKJ", "GLHJIKM", "GLHJIMK", "GLHJKIM", "GLHJKMI", "GLHJMIK", "GLHJMKI", "GLHKIJM", "GLHKIMJ", "GLHKJIM", _
		"GLHKJMI", "GLHKMIJ", "GLHKMJI", "GLHMIJK", "GLHMIKJ", "GLHMJIK", "GLHMJKI", "GLHMKIJ", "GLHMKJI", "GLIHJKM", "GLIHJMK", "GLIHKJM", "GLIHKMJ", "GLIHMJK", "GLIHMKJ", _
		"GLIJHKM", "GLIJHMK", "GLIJKHM", "GLIJKMH", "GLIJMHK", "GLIJMKH", "GLIKHJM", "GLIKHMJ", "GLIKJHM", "GLIKJMH", "GLIKMHJ", "GLIKMJH", "GLIMHJK", "GLIMHKJ", "GLIMJHK", _
		"GLIMJKH", "GLIMKHJ", "GLIMKJH", "GLJHIKM", "GLJHIMK", "GLJHKIM", "GLJHKMI", "GLJHMIK", "GLJHMKI", "GLJIHKM", "GLJIHMK", "GLJIKHM", "GLJIKMH", "GLJIMHK", "GLJIMKH", _
		"GLJKHIM", "GLJKHMI", "GLJKIHM", "GLJKIMH", "GLJKMHI", "GLJKMIH", "GLJMHIK", "GLJMHKI", "GLJMIHK", "GLJMIKH", "GLJMKHI", "GLJMKIH", "GLKHIJM", "GLKHIMJ", "GLKHJIM", _
		"GLKHJMI", "GLKHMIJ", "GLKHMJI", "GLKIHJM", "GLKIHMJ", "GLKIJHM", "GLKIJMH", "GLKIMHJ", "GLKIMJH", "GLKJHIM", "GLKJHMI", "GLKJIHM", "GLKJIMH", "GLKJMHI", "GLKJMIH", _
		"GLKMHIJ", "GLKMHJI", "GLKMIHJ", "GLKMIJH", "GLKMJHI", "GLKMJIH", "GLMHIJK", "GLMHIKJ", "GLMHJIK", "GLMHJKI", "GLMHKIJ", "GLMHKJI", "GLMIHJK", "GLMIHKJ", "GLMIJHK", _
		"GLMIJKH", "GLMIKHJ", "GLMIKJH", "GLMJHIK", "GLMJHKI", "GLMJIHK", "GLMJIKH", "GLMJKHI", "GLMJKIH", "GLMKHIJ", "GLMKHJI", "GLMKIHJ", "GLMKIJH", "GLMKJHI", "GLMKJIH", _
		"GMHIJKL", "GMHIJLK", "GMHIKJL", "GMHIKLJ", "GMHILJK", "GMHILKJ", "GMHJIKL", "GMHJILK", "GMHJKIL", "GMHJKLI", "GMHJLIK", "GMHJLKI", "GMHKIJL", "GMHKILJ", "GMHKJIL", _
		"GMHKJLI", "GMHKLIJ", "GMHKLJI", "GMHLIJK", "GMHLIKJ", "GMHLJIK", "GMHLJKI", "GMHLKIJ", "GMHLKJI", "GMIHJKL", "GMIHJLK", "GMIHKJL", "GMIHKLJ", "GMIHLJK", "GMIHLKJ", _
		"GMIJHKL", "GMIJHLK", "GMIJKHL", "GMIJKLH", "GMIJLHK", "GMIJLKH", "GMIKHJL", "GMIKHLJ", "GMIKJHL", "GMIKJLH", "GMIKLHJ", "GMIKLJH", "GMILHJK", "GMILHKJ", "GMILJHK", _
		"GMILJKH", "GMILKHJ", "GMILKJH", "GMJHIKL", "GMJHILK", "GMJHKIL", "GMJHKLI", "GMJHLIK", "GMJHLKI", "GMJIHKL", "GMJIHLK", "GMJIKHL", "GMJIKLH", "GMJILHK", "GMJILKH", _
		"GMJKHIL", "GMJKHLI", "GMJKIHL", "GMJKILH", "GMJKLHI", "GMJKLIH", "GMJLHIK", "GMJLHKI", "GMJLIHK", "GMJLIKH", "GMJLKHI", "GMJLKIH", "GMKHIJL", "GMKHILJ", "GMKHJIL", _
		"GMKHJLI", "GMKHLIJ", "GMKHLJI", "GMKIHJL", "GMKIHLJ", "GMKIJHL", "GMKIJLH", "GMKILHJ", "GMKILJH", "GMKJHIL", "GMKJHLI", "GMKJIHL", "GMKJILH", "GMKJLHI", "GMKJLIH", _
		"GMKLHIJ", "GMKLHJI", "GMKLIHJ", "GMKLIJH", "GMKLJHI", "GMKLJIH", "GMLHIJK", "GMLHIKJ", "GMLHJIK", "GMLHJKI", "GMLHKIJ", "GMLHKJI", "GMLIHJK", "GMLIHKJ", "GMLIJHK", _
		"GMLIJKH", "GMLIKHJ", "GMLIKJH", "GMLJHIK", "GMLJHKI", "GMLJIHK", "GMLJIKH", "GMLJKHI", "GMLJKIH", "GMLKHIJ", "GMLKHJI", "GMLKIHJ", "GMLKIJH", "GMLKJHI", "GMLKJIH", _
		"HGIJKLM", "HGIJKML", "HGIJLKM", "HGIJLMK", "HGIJMKL", "HGIJMLK", "HGIKJLM", "HGIKJML", "HGIKLJM", "HGIKLMJ", "HGIKMJL", "HGIKMLJ", "HGILJKM", "HGILJMK", "HGILKJM", _
		"HGILKMJ", "HGILMJK", "HGILMKJ", "HGIMJKL", "HGIMJLK", "HGIMKJL", "HGIMKLJ", "HGIMLJK", "HGIMLKJ", "HGJIKLM", "HGJIKML", "HGJILKM", "HGJILMK", "HGJIMKL", "HGJIMLK", _
		"HGJKILM", "HGJKIML", "HGJKLIM", "HGJKLMI", "HGJKMIL", "HGJKMLI", "HGJLIKM", "HGJLIMK", "HGJLKIM", "HGJLKMI", "HGJLMIK", "HGJLMKI", "HGJMIKL", "HGJMILK", "HGJMKIL", _
		"HGJMKLI", "HGJMLIK", "HGJMLKI", "HGKIJLM", "HGKIJML", "HGKILJM", "HGKILMJ", "HGKIMJL", "HGKIMLJ", "HGKJILM", "HGKJIML", "HGKJLIM", "HGKJLMI", "HGKJMIL", "HGKJMLI", _
		"HGKLIJM", "HGKLIMJ", "HGKLJIM", "HGKLJMI", "HGKLMIJ", "HGKLMJI", "HGKMIJL", "HGKMILJ", "HGKMJIL", "HGKMJLI", "HGKMLIJ", "HGKMLJI", "HGLIJKM", "HGLIJMK", "HGLIKJM", _
		"HGLIKMJ", "HGLIMJK", "HGLIMKJ", "HGLJIKM", "HGLJIMK", "HGLJKIM", "HGLJKMI", "HGLJMIK", "HGLJMKI", "HGLKIJM", "HGLKIMJ", "HGLKJIM", "HGLKJMI", "HGLKMIJ", "HGLKMJI", _
		"HGLMIJK", "HGLMIKJ", "HGLMJIK", "HGLMJKI", "HGLMKIJ", "HGLMKJI", "HGMIJKL", "HGMIJLK", "HGMIKJL", "HGMIKLJ", "HGMILJK", "HGMILKJ", "HGMJIKL", "HGMJILK", "HGMJKIL", _
		"HGMJKLI", "HGMJLIK", "HGMJLKI", "HGMKIJL", "HGMKILJ", "HGMKJIL", "HGMKJLI", "HGMKLIJ", "HGMKLJI", "HGMLIJK", "HGMLIKJ", "HGMLJIK", "HGMLJKI", "HGMLKIJ", "HGMLKJI", _
		"HIGJKLM", "HIGJKML", "HIGJLKM", "HIGJLMK", "HIGJMKL", "HIGJMLK", "HIGKJLM", "HIGKJML", "HIGKLJM", "HIGKLMJ", "HIGKMJL", "HIGKMLJ", "HIGLJKM", "HIGLJMK", "HIGLKJM", _
		"HIGLKMJ", "HIGLMJK", "HIGLMKJ", "HIGMJKL", "HIGMJLK", "HIGMKJL", "HIGMKLJ", "HIGMLJK", "HIGMLKJ", "HIJGKLM", "HIJGKML", "HIJGLKM", "HIJGLMK", "HIJGMKL", "HIJGMLK", _
		"HIJKGLM", "HIJKGML", "HIJKLGM", "HIJKLMG", "HIJKMGL", "HIJKMLG", "HIJLGKM", "HIJLGMK", "HIJLKGM", "HIJLKMG", "HIJLMGK", "HIJLMKG", "HIJMGKL", "HIJMGLK", "HIJMKGL", _
		"HIJMKLG", "HIJMLGK", "HIJMLKG", "HIKGJLM", "HIKGJML", "HIKGLJM", "HIKGLMJ", "HIKGMJL", "HIKGMLJ", "HIKJGLM", "HIKJGML", "HIKJLGM", "HIKJLMG", "HIKJMGL", "HIKJMLG", _
		"HIKLGJM", "HIKLGMJ", "HIKLJGM", "HIKLJMG", "HIKLMGJ", "HIKLMJG", "HIKMGJL", "HIKMGLJ", "HIKMJGL", "HIKMJLG", "HIKMLGJ", "HIKMLJG", "HILGJKM", "HILGJMK", "HILGKJM", _
		"HILGKMJ", "HILGMJK", "HILGMKJ", "HILJGKM", "HILJGMK", "HILJKGM", "HILJKMG", "HILJMGK", "HILJMKG", "HILKGJM", "HILKGMJ", "HILKJGM", "HILKJMG", "HILKMGJ", "HILKMJG", _
		"HILMGJK", "HILMGKJ", "HILMJGK", "HILMJKG", "HILMKGJ", "HILMKJG", "HIMGJKL", "HIMGJLK", "HIMGKJL", "HIMGKLJ", "HIMGLJK", "HIMGLKJ", "HIMJGKL", "HIMJGLK", "HIMJKGL", _
		"HIMJKLG", "HIMJLGK", "HIMJLKG", "HIMKGJL", "HIMKGLJ", "HIMKJGL", "HIMKJLG", "HIMKLGJ", "HIMKLJG", "HIMLGJK", "HIMLGKJ", "HIMLJGK", "HIMLJKG", "HIMLKGJ", "HIMLKJG", _
		"HJGIKLM", "HJGIKML", "HJGILKM", "HJGILMK", "HJGIMKL", "HJGIMLK", "HJGKILM", "HJGKIML", "HJGKLIM", "HJGKLMI", "HJGKMIL", "HJGKMLI", "HJGLIKM", "HJGLIMK", "HJGLKIM", _
		"HJGLKMI", "HJGLMIK", "HJGLMKI", "HJGMIKL", "HJGMILK", "HJGMKIL", "HJGMKLI", "HJGMLIK", "HJGMLKI", "HJIGKLM", "HJIGKML", "HJIGLKM", "HJIGLMK", "HJIGMKL", "HJIGMLK", _
		"HJIKGLM", "HJIKGML", "HJIKLGM", "HJIKLMG", "HJIKMGL", "HJIKMLG", "HJILGKM", "HJILGMK", "HJILKGM", "HJILKMG", "HJILMGK", "HJILMKG", "HJIMGKL", "HJIMGLK", "HJIMKGL", _
		"HJIMKLG", "HJIMLGK", "HJIMLKG", "HJKGILM", "HJKGIML", "HJKGLIM", "HJKGLMI", "HJKGMIL", "HJKGMLI", "HJKIGLM", "HJKIGML", "HJKILGM", "HJKILMG", "HJKIMGL", "HJKIMLG", _
		"HJKLGIM", "HJKLGMI", "HJKLIGM", "HJKLIMG", "HJKLMGI", "HJKLMIG", "HJKMGIL", "HJKMGLI", "HJKMIGL", "HJKMILG", "HJKMLGI", "HJKMLIG", "HJLGIKM", "HJLGIMK", "HJLGKIM", _
		"HJLGKMI", "HJLGMIK", "HJLGMKI", "HJLIGKM", "HJLIGMK", "HJLIKGM", "HJLIKMG", "HJLIMGK", "HJLIMKG", "HJLKGIM", "HJLKGMI", "HJLKIGM", "HJLKIMG", "HJLKMGI", "HJLKMIG", _
		"HJLMGIK", "HJLMGKI", "HJLMIGK", "HJLMIKG", "HJLMKGI", "HJLMKIG", "HJMGIKL", "HJMGILK", "HJMGKIL", "HJMGKLI", "HJMGLIK", "HJMGLKI", "HJMIGKL", "HJMIGLK", "HJMIKGL", _
		"HJMIKLG", "HJMILGK", "HJMILKG", "HJMKGIL", "HJMKGLI", "HJMKIGL", "HJMKILG", "HJMKLGI", "HJMKLIG", "HJMLGIK", "HJMLGKI", "HJMLIGK", "HJMLIKG", "HJMLKGI", "HJMLKIG", _
		"HKGIJLM", "HKGIJML", "HKGILJM", "HKGILMJ", "HKGIMJL", "HKGIMLJ", "HKGJILM", "HKGJIML", "HKGJLIM", "HKGJLMI", "HKGJMIL", "HKGJMLI", "HKGLIJM", "HKGLIMJ", "HKGLJIM", _
		"HKGLJMI", "HKGLMIJ", "HKGLMJI", "HKGMIJL", "HKGMILJ", "HKGMJIL", "HKGMJLI", "HKGMLIJ", "HKGMLJI", "HKIGJLM", "HKIGJML", "HKIGLJM", "HKIGLMJ", "HKIGMJL", "HKIGMLJ", _
		"HKIJGLM", "HKIJGML", "HKIJLGM", "HKIJLMG", "HKIJMGL", "HKIJMLG", "HKILGJM", "HKILGMJ", "HKILJGM", "HKILJMG", "HKILMGJ", "HKILMJG", "HKIMGJL", "HKIMGLJ", "HKIMJGL", _
		"HKIMJLG", "HKIMLGJ", "HKIMLJG", "HKJGILM", "HKJGIML", "HKJGLIM", "HKJGLMI", "HKJGMIL", "HKJGMLI", "HKJIGLM", "HKJIGML", "HKJILGM", "HKJILMG", "HKJIMGL", "HKJIMLG", _
		"HKJLGIM", "HKJLGMI", "HKJLIGM", "HKJLIMG", "HKJLMGI", "HKJLMIG", "HKJMGIL", "HKJMGLI", "HKJMIGL", "HKJMILG", "HKJMLGI", "HKJMLIG", "HKLGIJM", "HKLGIMJ", "HKLGJIM", _
		"HKLGJMI", "HKLGMIJ", "HKLGMJI", "HKLIGJM", "HKLIGMJ", "HKLIJGM", "HKLIJMG", "HKLIMGJ", "HKLIMJG", "HKLJGIM", "HKLJGMI", "HKLJIGM", "HKLJIMG", "HKLJMGI", "HKLJMIG", _
		"HKLMGIJ", "HKLMGJI", "HKLMIGJ", "HKLMIJG", "HKLMJGI", "HKLMJIG", "HKMGIJL", "HKMGILJ", "HKMGJIL", "HKMGJLI", "HKMGLIJ", "HKMGLJI", "HKMIGJL", "HKMIGLJ", "HKMIJGL", _
		"HKMIJLG", "HKMILGJ", "HKMILJG", "HKMJGIL", "HKMJGLI", "HKMJIGL", "HKMJILG", "HKMJLGI", "HKMJLIG", "HKMLGIJ", "HKMLGJI", "HKMLIGJ", "HKMLIJG", "HKMLJGI", "HKMLJIG", _
		"HLGIJKM", "HLGIJMK", "HLGIKJM", "HLGIKMJ", "HLGIMJK", "HLGIMKJ", "HLGJIKM", "HLGJIMK", "HLGJKIM", "HLGJKMI", "HLGJMIK", "HLGJMKI", "HLGKIJM", "HLGKIMJ", "HLGKJIM", _
		"HLGKJMI", "HLGKMIJ", "HLGKMJI", "HLGMIJK", "HLGMIKJ", "HLGMJIK", "HLGMJKI", "HLGMKIJ", "HLGMKJI", "HLIGJKM", "HLIGJMK", "HLIGKJM", "HLIGKMJ", "HLIGMJK", "HLIGMKJ", _
		"HLIJGKM", "HLIJGMK", "HLIJKGM", "HLIJKMG", "HLIJMGK", "HLIJMKG", "HLIKGJM", "HLIKGMJ", "HLIKJGM", "HLIKJMG", "HLIKMGJ", "HLIKMJG", "HLIMGJK", "HLIMGKJ", "HLIMJGK", _
		"HLIMJKG", "HLIMKGJ", "HLIMKJG", "HLJGIKM", "HLJGIMK", "HLJGKIM", "HLJGKMI", "HLJGMIK", "HLJGMKI", "HLJIGKM", "HLJIGMK", "HLJIKGM", "HLJIKMG", "HLJIMGK", "HLJIMKG", _
		"HLJKGIM", "HLJKGMI", "HLJKIGM", "HLJKIMG", "HLJKMGI", "HLJKMIG", "HLJMGIK", "HLJMGKI", "HLJMIGK", "HLJMIKG", "HLJMKGI", "HLJMKIG", "HLKGIJM", "HLKGIMJ", "HLKGJIM", _
		"HLKGJMI", "HLKGMIJ", "HLKGMJI", "HLKIGJM", "HLKIGMJ", "HLKIJGM", "HLKIJMG", "HLKIMGJ", "HLKIMJG", "HLKJGIM", "HLKJGMI", "HLKJIGM", "HLKJIMG", "HLKJMGI", "HLKJMIG", _
		"HLKMGIJ", "HLKMGJI", "HLKMIGJ", "HLKMIJG", "HLKMJGI", "HLKMJIG", "HLMGIJK", "HLMGIKJ", "HLMGJIK", "HLMGJKI", "HLMGKIJ", "HLMGKJI", "HLMIGJK", "HLMIGKJ", "HLMIJGK", _
		"HLMIJKG", "HLMIKGJ", "HLMIKJG", "HLMJGIK", "HLMJGKI", "HLMJIGK", "HLMJIKG", "HLMJKGI", "HLMJKIG", "HLMKGIJ", "HLMKGJI", "HLMKIGJ", "HLMKIJG", "HLMKJGI", "HLMKJIG", _
		"HMGIJKL", "HMGIJLK", "HMGIKJL", "HMGIKLJ", "HMGILJK", "HMGILKJ", "HMGJIKL", "HMGJILK", "HMGJKIL", "HMGJKLI", "HMGJLIK", "HMGJLKI", "HMGKIJL", "HMGKILJ", "HMGKJIL", _
		"HMGKJLI", "HMGKLIJ", "HMGKLJI", "HMGLIJK", "HMGLIKJ", "HMGLJIK", "HMGLJKI", "HMGLKIJ", "HMGLKJI", "HMIGJKL", "HMIGJLK", "HMIGKJL", "HMIGKLJ", "HMIGLJK", "HMIGLKJ", _
		"HMIJGKL", "HMIJGLK", "HMIJKGL", "HMIJKLG", "HMIJLGK", "HMIJLKG", "HMIKGJL", "HMIKGLJ", "HMIKJGL", "HMIKJLG", "HMIKLGJ", "HMIKLJG", "HMILGJK", "HMILGKJ", "HMILJGK", _
		"HMILJKG", "HMILKGJ", "HMILKJG", "HMJGIKL", "HMJGILK", "HMJGKIL", "HMJGKLI", "HMJGLIK", "HMJGLKI", "HMJIGKL", "HMJIGLK", "HMJIKGL", "HMJIKLG", "HMJILGK", "HMJILKG", _
		"HMJKGIL", "HMJKGLI", "HMJKIGL", "HMJKILG", "HMJKLGI", "HMJKLIG", "HMJLGIK", "HMJLGKI", "HMJLIGK", "HMJLIKG", "HMJLKGI", "HMJLKIG", "HMKGIJL", "HMKGILJ", "HMKGJIL", _
		"HMKGJLI", "HMKGLIJ", "HMKGLJI", "HMKIGJL", "HMKIGLJ", "HMKIJGL", "HMKIJLG", "HMKILGJ", "HMKILJG", "HMKJGIL", "HMKJGLI", "HMKJIGL", "HMKJILG", "HMKJLGI", "HMKJLIG", _
		"HMKLGIJ", "HMKLGJI", "HMKLIGJ", "HMKLIJG", "HMKLJGI", "HMKLJIG", "HMLGIJK", "HMLGIKJ", "HMLGJIK", "HMLGJKI", "HMLGKIJ", "HMLGKJI", "HMLIGJK", "HMLIGKJ", "HMLIJGK", _
		"HMLIJKG", "HMLIKGJ", "HMLIKJG", "HMLJGIK", "HMLJGKI", "HMLJIGK", "HMLJIKG", "HMLJKGI", "HMLJKIG", "HMLKGIJ", "HMLKGJI", "HMLKIGJ", "HMLKIJG", "HMLKJGI", "HMLKJIG", _
		"IGHJKLM", "IGHJKML", "IGHJLKM", "IGHJLMK", "IGHJMKL", "IGHJMLK", "IGHKJLM", "IGHKJML", "IGHKLJM", "IGHKLMJ", "IGHKMJL", "IGHKMLJ", "IGHLJKM", "IGHLJMK", "IGHLKJM", _
		"IGHLKMJ", "IGHLMJK", "IGHLMKJ", "IGHMJKL", "IGHMJLK", "IGHMKJL", "IGHMKLJ", "IGHMLJK", "IGHMLKJ", "IGJHKLM", "IGJHKML", "IGJHLKM", "IGJHLMK", "IGJHMKL", "IGJHMLK", _
		"IGJKHLM", "IGJKHML", "IGJKLHM", "IGJKLMH", "IGJKMHL", "IGJKMLH", "IGJLHKM", "IGJLHMK", "IGJLKHM", "IGJLKMH", "IGJLMHK", "IGJLMKH", "IGJMHKL", "IGJMHLK", "IGJMKHL", _
		"IGJMKLH", "IGJMLHK", "IGJMLKH", "IGKHJLM", "IGKHJML", "IGKHLJM", "IGKHLMJ", "IGKHMJL", "IGKHMLJ", "IGKJHLM", "IGKJHML", "IGKJLHM", "IGKJLMH", "IGKJMHL", "IGKJMLH", _
		"IGKLHJM", "IGKLHMJ", "IGKLJHM", "IGKLJMH", "IGKLMHJ", "IGKLMJH", "IGKMHJL", "IGKMHLJ", "IGKMJHL", "IGKMJLH", "IGKMLHJ", "IGKMLJH", "IGLHJKM", "IGLHJMK", "IGLHKJM", _
		"IGLHKMJ", "IGLHMJK", "IGLHMKJ", "IGLJHKM", "IGLJHMK", "IGLJKHM", "IGLJKMH", "IGLJMHK", "IGLJMKH", "IGLKHJM", "IGLKHMJ", "IGLKJHM", "IGLKJMH", "IGLKMHJ", "IGLKMJH", _
		"IGLMHJK", "IGLMHKJ", "IGLMJHK", "IGLMJKH", "IGLMKHJ", "IGLMKJH", "IGMHJKL", "IGMHJLK", "IGMHKJL", "IGMHKLJ", "IGMHLJK", "IGMHLKJ", "IGMJHKL", "IGMJHLK", "IGMJKHL", _
		"IGMJKLH", "IGMJLHK", "IGMJLKH", "IGMKHJL", "IGMKHLJ", "IGMKJHL", "IGMKJLH", "IGMKLHJ", "IGMKLJH", "IGMLHJK", "IGMLHKJ", "IGMLJHK", "IGMLJKH", "IGMLKHJ", "IGMLKJH", _
		"IHGJKLM", "IHGJKML", "IHGJLKM", "IHGJLMK", "IHGJMKL", "IHGJMLK", "IHGKJLM", "IHGKJML", "IHGKLJM", "IHGKLMJ", "IHGKMJL", "IHGKMLJ", "IHGLJKM", "IHGLJMK", "IHGLKJM", _
		"IHGLKMJ", "IHGLMJK", "IHGLMKJ", "IHGMJKL", "IHGMJLK", "IHGMKJL", "IHGMKLJ", "IHGMLJK", "IHGMLKJ", "IHJGKLM", "IHJGKML", "IHJGLKM", "IHJGLMK", "IHJGMKL", "IHJGMLK", _
		"IHJKGLM", "IHJKGML", "IHJKLGM", "IHJKLMG", "IHJKMGL", "IHJKMLG", "IHJLGKM", "IHJLGMK", "IHJLKGM", "IHJLKMG", "IHJLMGK", "IHJLMKG", "IHJMGKL", "IHJMGLK", "IHJMKGL", _
		"IHJMKLG", "IHJMLGK", "IHJMLKG", "IHKGJLM", "IHKGJML", "IHKGLJM", "IHKGLMJ", "IHKGMJL", "IHKGMLJ", "IHKJGLM", "IHKJGML", "IHKJLGM", "IHKJLMG", "IHKJMGL", "IHKJMLG", _
		"IHKLGJM", "IHKLGMJ", "IHKLJGM", "IHKLJMG", "IHKLMGJ", "IHKLMJG", "IHKMGJL", "IHKMGLJ", "IHKMJGL", "IHKMJLG", "IHKMLGJ", "IHKMLJG", "IHLGJKM", "IHLGJMK", "IHLGKJM", _
		"IHLGKMJ", "IHLGMJK", "IHLGMKJ", "IHLJGKM", "IHLJGMK", "IHLJKGM", "IHLJKMG", "IHLJMGK", "IHLJMKG", "IHLKGJM", "IHLKGMJ", "IHLKJGM", "IHLKJMG", "IHLKMGJ", "IHLKMJG", _
		"IHLMGJK", "IHLMGKJ", "IHLMJGK", "IHLMJKG", "IHLMKGJ", "IHLMKJG", "IHMGJKL", "IHMGJLK", "IHMGKJL", "IHMGKLJ", "IHMGLJK", "IHMGLKJ", "IHMJGKL", "IHMJGLK", "IHMJKGL", _
		"IHMJKLG", "IHMJLGK", "IHMJLKG", "IHMKGJL", "IHMKGLJ", "IHMKJGL", "IHMKJLG", "IHMKLGJ", "IHMKLJG", "IHMLGJK", "IHMLGKJ", "IHMLJGK", "IHMLJKG", "IHMLKGJ", "IHMLKJG", _
		"IJGHKLM", "IJGHKML", "IJGHLKM", "IJGHLMK", "IJGHMKL", "IJGHMLK", "IJGKHLM", "IJGKHML", "IJGKLHM", "IJGKLMH", "IJGKMHL", "IJGKMLH", "IJGLHKM", "IJGLHMK", "IJGLKHM", _
		"IJGLKMH", "IJGLMHK", "IJGLMKH", "IJGMHKL", "IJGMHLK", "IJGMKHL", "IJGMKLH", "IJGMLHK", "IJGMLKH", "IJHGKLM", "IJHGKML", "IJHGLKM", "IJHGLMK", "IJHGMKL", "IJHGMLK", _
		"IJHKGLM", "IJHKGML", "IJHKLGM", "IJHKLMG", "IJHKMGL", "IJHKMLG", "IJHLGKM", "IJHLGMK", "IJHLKGM", "IJHLKMG", "IJHLMGK", "IJHLMKG", "IJHMGKL", "IJHMGLK", "IJHMKGL", _
		"IJHMKLG", "IJHMLGK", "IJHMLKG", "IJKGHLM", "IJKGHML", "IJKGLHM", "IJKGLMH", "IJKGMHL", "IJKGMLH", "IJKHGLM", "IJKHGML", "IJKHLGM", "IJKHLMG", "IJKHMGL", "IJKHMLG", _
		"IJKLGHM", "IJKLGMH", "IJKLHGM", "IJKLHMG", "IJKLMGH", "IJKLMHG", "IJKMGHL", "IJKMGLH", "IJKMHGL", "IJKMHLG", "IJKMLGH", "IJKMLHG", "IJLGHKM", "IJLGHMK", "IJLGKHM", _
		"IJLGKMH", "IJLGMHK", "IJLGMKH", "IJLHGKM", "IJLHGMK", "IJLHKGM", "IJLHKMG", "IJLHMGK", "IJLHMKG", "IJLKGHM", "IJLKGMH", "IJLKHGM", "IJLKHMG", "IJLKMGH", "IJLKMHG", _
		"IJLMGHK", "IJLMGKH", "IJLMHGK", "IJLMHKG", "IJLMKGH", "IJLMKHG", "IJMGHKL", "IJMGHLK", "IJMGKHL", "IJMGKLH", "IJMGLHK", "IJMGLKH", "IJMHGKL", "IJMHGLK", "IJMHKGL", _
		"IJMHKLG", "IJMHLGK", "IJMHLKG", "IJMKGHL", "IJMKGLH", "IJMKHGL", "IJMKHLG", "IJMKLGH", "IJMKLHG", "IJMLGHK", "IJMLGKH", "IJMLHGK", "IJMLHKG", "IJMLKGH", "IJMLKHG", _
		"IKGHJLM", "IKGHJML", "IKGHLJM", "IKGHLMJ", "IKGHMJL", "IKGHMLJ", "IKGJHLM", "IKGJHML", "IKGJLHM", "IKGJLMH", "IKGJMHL", "IKGJMLH", "IKGLHJM", "IKGLHMJ", "IKGLJHM", _
		"IKGLJMH", "IKGLMHJ", "IKGLMJH", "IKGMHJL", "IKGMHLJ", "IKGMJHL", "IKGMJLH", "IKGMLHJ", "IKGMLJH", "IKHGJLM", "IKHGJML", "IKHGLJM", "IKHGLMJ", "IKHGMJL", "IKHGMLJ", _
		"IKHJGLM", "IKHJGML", "IKHJLGM", "IKHJLMG", "IKHJMGL", "IKHJMLG", "IKHLGJM", "IKHLGMJ", "IKHLJGM", "IKHLJMG", "IKHLMGJ", "IKHLMJG", "IKHMGJL", "IKHMGLJ", "IKHMJGL", _
		"IKHMJLG", "IKHMLGJ", "IKHMLJG", "IKJGHLM", "IKJGHML", "IKJGLHM", "IKJGLMH", "IKJGMHL", "IKJGMLH", "IKJHGLM", "IKJHGML", "IKJHLGM", "IKJHLMG", "IKJHMGL", "IKJHMLG", _
		"IKJLGHM", "IKJLGMH", "IKJLHGM", "IKJLHMG", "IKJLMGH", "IKJLMHG", "IKJMGHL", "IKJMGLH", "IKJMHGL", "IKJMHLG", "IKJMLGH", "IKJMLHG", "IKLGHJM", "IKLGHMJ", "IKLGJHM", _
		"IKLGJMH", "IKLGMHJ", "IKLGMJH", "IKLHGJM", "IKLHGMJ", "IKLHJGM", "IKLHJMG", "IKLHMGJ", "IKLHMJG", "IKLJGHM", "IKLJGMH", "IKLJHGM", "IKLJHMG", "IKLJMGH", "IKLJMHG", _
		"IKLMGHJ", "IKLMGJH", "IKLMHGJ", "IKLMHJG", "IKLMJGH", "IKLMJHG", "IKMGHJL", "IKMGHLJ", "IKMGJHL", "IKMGJLH", "IKMGLHJ", "IKMGLJH", "IKMHGJL", "IKMHGLJ", "IKMHJGL", _
		"IKMHJLG", "IKMHLGJ", "IKMHLJG", "IKMJGHL", "IKMJGLH", "IKMJHGL", "IKMJHLG", "IKMJLGH", "IKMJLHG", "IKMLGHJ", "IKMLGJH", "IKMLHGJ", "IKMLHJG", "IKMLJGH", "IKMLJHG", _
		"ILGHJKM", "ILGHJMK", "ILGHKJM", "ILGHKMJ", "ILGHMJK", "ILGHMKJ", "ILGJHKM", "ILGJHMK", "ILGJKHM", "ILGJKMH", "ILGJMHK", "ILGJMKH", "ILGKHJM", "ILGKHMJ", "ILGKJHM", _
		"ILGKJMH", "ILGKMHJ", "ILGKMJH", "ILGMHJK", "ILGMHKJ", "ILGMJHK", "ILGMJKH", "ILGMKHJ", "ILGMKJH", "ILHGJKM", "ILHGJMK", "ILHGKJM", "ILHGKMJ", "ILHGMJK", "ILHGMKJ", _
		"ILHJGKM", "ILHJGMK", "ILHJKGM", "ILHJKMG", "ILHJMGK", "ILHJMKG", "ILHKGJM", "ILHKGMJ", "ILHKJGM", "ILHKJMG", "ILHKMGJ", "ILHKMJG", "ILHMGJK", "ILHMGKJ", "ILHMJGK", _
		"ILHMJKG", "ILHMKGJ", "ILHMKJG", "ILJGHKM", "ILJGHMK", "ILJGKHM", "ILJGKMH", "ILJGMHK", "ILJGMKH", "ILJHGKM", "ILJHGMK", "ILJHKGM", "ILJHKMG", "ILJHMGK", "ILJHMKG", _
		"ILJKGHM", "ILJKGMH", "ILJKHGM", "ILJKHMG", "ILJKMGH", "ILJKMHG", "ILJMGHK", "ILJMGKH", "ILJMHGK", "ILJMHKG", "ILJMKGH", "ILJMKHG", "ILKGHJM", "ILKGHMJ", "ILKGJHM", _
		"ILKGJMH", "ILKGMHJ", "ILKGMJH", "ILKHGJM", "ILKHGMJ", "ILKHJGM", "ILKHJMG", "ILKHMGJ", "ILKHMJG", "ILKJGHM", "ILKJGMH", "ILKJHGM", "ILKJHMG", "ILKJMGH", "ILKJMHG", _
		"ILKMGHJ", "ILKMGJH", "ILKMHGJ", "ILKMHJG", "ILKMJGH", "ILKMJHG", "ILMGHJK", "ILMGHKJ", "ILMGJHK", "ILMGJKH", "ILMGKHJ", "ILMGKJH", "ILMHGJK", "ILMHGKJ", "ILMHJGK", _
		"ILMHJKG", "ILMHKGJ", "ILMHKJG", "ILMJGHK", "ILMJGKH", "ILMJHGK", "ILMJHKG", "ILMJKGH", "ILMJKHG", "ILMKGHJ", "ILMKGJH", "ILMKHGJ", "ILMKHJG", "ILMKJGH", "ILMKJHG", _
		"IMGHJKL", "IMGHJLK", "IMGHKJL", "IMGHKLJ", "IMGHLJK", "IMGHLKJ", "IMGJHKL", "IMGJHLK", "IMGJKHL", "IMGJKLH", "IMGJLHK", "IMGJLKH", "IMGKHJL", "IMGKHLJ", "IMGKJHL", _
		"IMGKJLH", "IMGKLHJ", "IMGKLJH", "IMGLHJK", "IMGLHKJ", "IMGLJHK", "IMGLJKH", "IMGLKHJ", "IMGLKJH", "IMHGJKL", "IMHGJLK", "IMHGKJL", "IMHGKLJ", "IMHGLJK", "IMHGLKJ", _
		"IMHJGKL", "IMHJGLK", "IMHJKGL", "IMHJKLG", "IMHJLGK", "IMHJLKG", "IMHKGJL", "IMHKGLJ", "IMHKJGL", "IMHKJLG", "IMHKLGJ", "IMHKLJG", "IMHLGJK", "IMHLGKJ", "IMHLJGK", _
		"IMHLJKG", "IMHLKGJ", "IMHLKJG", "IMJGHKL", "IMJGHLK", "IMJGKHL", "IMJGKLH", "IMJGLHK", "IMJGLKH", "IMJHGKL", "IMJHGLK", "IMJHKGL", "IMJHKLG", "IMJHLGK", "IMJHLKG", _
		"IMJKGHL", "IMJKGLH", "IMJKHGL", "IMJKHLG", "IMJKLGH", "IMJKLHG", "IMJLGHK", "IMJLGKH", "IMJLHGK", "IMJLHKG", "IMJLKGH", "IMJLKHG", "IMKGHJL", "IMKGHLJ", "IMKGJHL", _
		"IMKGJLH", "IMKGLHJ", "IMKGLJH", "IMKHGJL", "IMKHGLJ", "IMKHJGL", "IMKHJLG", "IMKHLGJ", "IMKHLJG", "IMKJGHL", "IMKJGLH", "IMKJHGL", "IMKJHLG", "IMKJLGH", "IMKJLHG", _
		"IMKLGHJ", "IMKLGJH", "IMKLHGJ", "IMKLHJG", "IMKLJGH", "IMKLJHG", "IMLGHJK", "IMLGHKJ", "IMLGJHK", "IMLGJKH", "IMLGKHJ", "IMLGKJH", "IMLHGJK", "IMLHGKJ", "IMLHJGK", _
		"IMLHJKG", "IMLHKGJ", "IMLHKJG", "IMLJGHK", "IMLJGKH", "IMLJHGK", "IMLJHKG", "IMLJKGH", "IMLJKHG", "IMLKGHJ", "IMLKGJH", "IMLKHGJ", "IMLKHJG", "IMLKJGH", "IMLKJHG", _
		"JGHIKLM", "JGHIKML", "JGHILKM", "JGHILMK", "JGHIMKL", "JGHIMLK", "JGHKILM", "JGHKIML", "JGHKLIM", "JGHKLMI", "JGHKMIL", "JGHKMLI", "JGHLIKM", "JGHLIMK", "JGHLKIM", _
		"JGHLKMI", "JGHLMIK", "JGHLMKI", "JGHMIKL", "JGHMILK", "JGHMKIL", "JGHMKLI", "JGHMLIK", "JGHMLKI", "JGIHKLM", "JGIHKML", "JGIHLKM", "JGIHLMK", "JGIHMKL", "JGIHMLK", _
		"JGIKHLM", "JGIKHML", "JGIKLHM", "JGIKLMH", "JGIKMHL", "JGIKMLH", "JGILHKM", "JGILHMK", "JGILKHM", "JGILKMH", "JGILMHK", "JGILMKH", "JGIMHKL", "JGIMHLK", "JGIMKHL", _
		"JGIMKLH", "JGIMLHK", "JGIMLKH", "JGKHILM", "JGKHIML", "JGKHLIM", "JGKHLMI", "JGKHMIL", "JGKHMLI", "JGKIHLM", "JGKIHML", "JGKILHM", "JGKILMH", "JGKIMHL", "JGKIMLH", _
		"JGKLHIM", "JGKLHMI", "JGKLIHM", "JGKLIMH", "JGKLMHI", "JGKLMIH", "JGKMHIL", "JGKMHLI", "JGKMIHL", "JGKMILH", "JGKMLHI", "JGKMLIH", "JGLHIKM", "JGLHIMK", "JGLHKIM", _
		"JGLHKMI", "JGLHMIK", "JGLHMKI", "JGLIHKM", "JGLIHMK", "JGLIKHM", "JGLIKMH", "JGLIMHK", "JGLIMKH", "JGLKHIM", "JGLKHMI", "JGLKIHM", "JGLKIMH", "JGLKMHI", "JGLKMIH", _
		"JGLMHIK", "JGLMHKI", "JGLMIHK", "JGLMIKH", "JGLMKHI", "JGLMKIH", "JGMHIKL", "JGMHILK", "JGMHKIL", "JGMHKLI", "JGMHLIK", "JGMHLKI", "JGMIHKL", "JGMIHLK", "JGMIKHL", _
		"JGMIKLH", "JGMILHK", "JGMILKH", "JGMKHIL", "JGMKHLI", "JGMKIHL", "JGMKILH", "JGMKLHI", "JGMKLIH", "JGMLHIK", "JGMLHKI", "JGMLIHK", "JGMLIKH", "JGMLKHI", "JGMLKIH", _
		"JHGIKLM", "JHGIKML", "JHGILKM", "JHGILMK", "JHGIMKL", "JHGIMLK", "JHGKILM", "JHGKIML", "JHGKLIM", "JHGKLMI", "JHGKMIL", "JHGKMLI", "JHGLIKM", "JHGLIMK", "JHGLKIM", _
		"JHGLKMI", "JHGLMIK", "JHGLMKI", "JHGMIKL", "JHGMILK", "JHGMKIL", "JHGMKLI", "JHGMLIK", "JHGMLKI", "JHIGKLM", "JHIGKML", "JHIGLKM", "JHIGLMK", "JHIGMKL", "JHIGMLK", _
		"JHIKGLM", "JHIKGML", "JHIKLGM", "JHIKLMG", "JHIKMGL", "JHIKMLG", "JHILGKM", "JHILGMK", "JHILKGM", "JHILKMG", "JHILMGK", "JHILMKG", "JHIMGKL", "JHIMGLK", "JHIMKGL", _
		"JHIMKLG", "JHIMLGK", "JHIMLKG", "JHKGILM", "JHKGIML", "JHKGLIM", "JHKGLMI", "JHKGMIL", "JHKGMLI", "JHKIGLM", "JHKIGML", "JHKILGM", "JHKILMG", "JHKIMGL", "JHKIMLG", _
		"JHKLGIM", "JHKLGMI", "JHKLIGM", "JHKLIMG", "JHKLMGI", "JHKLMIG", "JHKMGIL", "JHKMGLI", "JHKMIGL", "JHKMILG", "JHKMLGI", "JHKMLIG", "JHLGIKM", "JHLGIMK", "JHLGKIM", _
		"JHLGKMI", "JHLGMIK", "JHLGMKI", "JHLIGKM", "JHLIGMK", "JHLIKGM", "JHLIKMG", "JHLIMGK", "JHLIMKG", "JHLKGIM", "JHLKGMI", "JHLKIGM", "JHLKIMG", "JHLKMGI", "JHLKMIG", _
		"JHLMGIK", "JHLMGKI", "JHLMIGK", "JHLMIKG", "JHLMKGI", "JHLMKIG", "JHMGIKL", "JHMGILK", "JHMGKIL", "JHMGKLI", "JHMGLIK", "JHMGLKI", "JHMIGKL", "JHMIGLK", "JHMIKGL", _
		"JHMIKLG", "JHMILGK", "JHMILKG", "JHMKGIL", "JHMKGLI", "JHMKIGL", "JHMKILG", "JHMKLGI", "JHMKLIG", "JHMLGIK", "JHMLGKI", "JHMLIGK", "JHMLIKG", "JHMLKGI", "JHMLKIG", _
		"JIGHKLM", "JIGHKML", "JIGHLKM", "JIGHLMK", "JIGHMKL", "JIGHMLK", "JIGKHLM", "JIGKHML", "JIGKLHM", "JIGKLMH", "JIGKMHL", "JIGKMLH", "JIGLHKM", "JIGLHMK", "JIGLKHM", _
		"JIGLKMH", "JIGLMHK", "JIGLMKH", "JIGMHKL", "JIGMHLK", "JIGMKHL", "JIGMKLH", "JIGMLHK", "JIGMLKH", "JIHGKLM", "JIHGKML", "JIHGLKM", "JIHGLMK", "JIHGMKL", "JIHGMLK", _
		"JIHKGLM", "JIHKGML", "JIHKLGM", "JIHKLMG", "JIHKMGL", "JIHKMLG", "JIHLGKM", "JIHLGMK", "JIHLKGM", "JIHLKMG", "JIHLMGK", "JIHLMKG", "JIHMGKL", "JIHMGLK", "JIHMKGL", _
		"JIHMKLG", "JIHMLGK", "JIHMLKG", "JIKGHLM", "JIKGHML", "JIKGLHM", "JIKGLMH", "JIKGMHL", "JIKGMLH", "JIKHGLM", "JIKHGML", "JIKHLGM", "JIKHLMG", "JIKHMGL", "JIKHMLG", _
		"JIKLGHM", "JIKLGMH", "JIKLHGM", "JIKLHMG", "JIKLMGH", "JIKLMHG", "JIKMGHL", "JIKMGLH", "JIKMHGL", "JIKMHLG", "JIKMLGH", "JIKMLHG", "JILGHKM", "JILGHMK", "JILGKHM", _
		"JILGKMH", "JILGMHK", "JILGMKH", "JILHGKM", "JILHGMK", "JILHKGM", "JILHKMG", "JILHMGK", "JILHMKG", "JILKGHM", "JILKGMH", "JILKHGM", "JILKHMG", "JILKMGH", "JILKMHG", _
		"JILMGHK", "JILMGKH", "JILMHGK", "JILMHKG", "JILMKGH", "JILMKHG", "JIMGHKL", "JIMGHLK", "JIMGKHL", "JIMGKLH", "JIMGLHK", "JIMGLKH", "JIMHGKL", "JIMHGLK", "JIMHKGL", _
		"JIMHKLG", "JIMHLGK", "JIMHLKG", "JIMKGHL", "JIMKGLH", "JIMKHGL", "JIMKHLG", "JIMKLGH", "JIMKLHG", "JIMLGHK", "JIMLGKH", "JIMLHGK", "JIMLHKG", "JIMLKGH", "JIMLKHG", _
		"JKGHILM", "JKGHIML", "JKGHLIM", "JKGHLMI", "JKGHMIL", "JKGHMLI", "JKGIHLM", "JKGIHML", "JKGILHM", "JKGILMH", "JKGIMHL", "JKGIMLH", "JKGLHIM", "JKGLHMI", "JKGLIHM", _
		"JKGLIMH", "JKGLMHI", "JKGLMIH", "JKGMHIL", "JKGMHLI", "JKGMIHL", "JKGMILH", "JKGMLHI", "JKGMLIH", "JKHGILM", "JKHGIML", "JKHGLIM", "JKHGLMI", "JKHGMIL", "JKHGMLI", _
		"JKHIGLM", "JKHIGML", "JKHILGM", "JKHILMG", "JKHIMGL", "JKHIMLG", "JKHLGIM", "JKHLGMI", "JKHLIGM", "JKHLIMG", "JKHLMGI", "JKHLMIG", "JKHMGIL", "JKHMGLI", "JKHMIGL", _
		"JKHMILG", "JKHMLGI", "JKHMLIG", "JKIGHLM", "JKIGHML", "JKIGLHM", "JKIGLMH", "JKIGMHL", "JKIGMLH", "JKIHGLM", "JKIHGML", "JKIHLGM", "JKIHLMG", "JKIHMGL", "JKIHMLG", _
		"JKILGHM", "JKILGMH", "JKILHGM", "JKILHMG", "JKILMGH", "JKILMHG", "JKIMGHL", "JKIMGLH", "JKIMHGL", "JKIMHLG", "JKIMLGH", "JKIMLHG", "JKLGHIM", "JKLGHMI", "JKLGIHM", _
		"JKLGIMH", "JKLGMHI", "JKLGMIH", "JKLHGIM", "JKLHGMI", "JKLHIGM", "JKLHIMG", "JKLHMGI", "JKLHMIG", "JKLIGHM", "JKLIGMH", "JKLIHGM", "JKLIHMG", "JKLIMGH", "JKLIMHG", _
		"JKLMGHI", "JKLMGIH", "JKLMHGI", "JKLMHIG", "JKLMIGH", "JKLMIHG", "JKMGHIL", "JKMGHLI", "JKMGIHL", "JKMGILH", "JKMGLHI", "JKMGLIH", "JKMHGIL", "JKMHGLI", "JKMHIGL", _
		"JKMHILG", "JKMHLGI", "JKMHLIG", "JKMIGHL", "JKMIGLH", "JKMIHGL", "JKMIHLG", "JKMILGH", "JKMILHG", "JKMLGHI", "JKMLGIH", "JKMLHGI", "JKMLHIG", "JKMLIGH", "JKMLIHG", _
		"JLGHIKM", "JLGHIMK", "JLGHKIM", "JLGHKMI", "JLGHMIK", "JLGHMKI", "JLGIHKM", "JLGIHMK", "JLGIKHM", "JLGIKMH", "JLGIMHK", "JLGIMKH", "JLGKHIM", "JLGKHMI", "JLGKIHM", _
		"JLGKIMH", "JLGKMHI", "JLGKMIH", "JLGMHIK", "JLGMHKI", "JLGMIHK", "JLGMIKH", "JLGMKHI", "JLGMKIH", "JLHGIKM", "JLHGIMK", "JLHGKIM", "JLHGKMI", "JLHGMIK", "JLHGMKI", _
		"JLHIGKM", "JLHIGMK", "JLHIKGM", "JLHIKMG", "JLHIMGK", "JLHIMKG", "JLHKGIM", "JLHKGMI", "JLHKIGM", "JLHKIMG", "JLHKMGI", "JLHKMIG", "JLHMGIK", "JLHMGKI", "JLHMIGK", _
		"JLHMIKG", "JLHMKGI", "JLHMKIG", "JLIGHKM", "JLIGHMK", "JLIGKHM", "JLIGKMH", "JLIGMHK", "JLIGMKH", "JLIHGKM", "JLIHGMK", "JLIHKGM", "JLIHKMG", "JLIHMGK", "JLIHMKG", _
		"JLIKGHM", "JLIKGMH", "JLIKHGM", "JLIKHMG", "JLIKMGH", "JLIKMHG", "JLIMGHK", "JLIMGKH", "JLIMHGK", "JLIMHKG", "JLIMKGH", "JLIMKHG", "JLKGHIM", "JLKGHMI", "JLKGIHM", _
		"JLKGIMH", "JLKGMHI", "JLKGMIH", "JLKHGIM", "JLKHGMI", "JLKHIGM", "JLKHIMG", "JLKHMGI", "JLKHMIG", "JLKIGHM", "JLKIGMH", "JLKIHGM", "JLKIHMG", "JLKIMGH", "JLKIMHG", _
		"JLKMGHI", "JLKMGIH", "JLKMHGI", "JLKMHIG", "JLKMIGH", "JLKMIHG", "JLMGHIK", "JLMGHKI", "JLMGIHK", "JLMGIKH", "JLMGKHI", "JLMGKIH", "JLMHGIK", "JLMHGKI", "JLMHIGK", _
		"JLMHIKG", "JLMHKGI", "JLMHKIG", "JLMIGHK", "JLMIGKH", "JLMIHGK", "JLMIHKG", "JLMIKGH", "JLMIKHG", "JLMKGHI", "JLMKGIH", "JLMKHGI", "JLMKHIG", "JLMKIGH", "JLMKIHG", _
		"JMGHIKL", "JMGHILK", "JMGHKIL", "JMGHKLI", "JMGHLIK", "JMGHLKI", "JMGIHKL", "JMGIHLK", "JMGIKHL", "JMGIKLH", "JMGILHK", "JMGILKH", "JMGKHIL", "JMGKHLI", "JMGKIHL", _
		"JMGKILH", "JMGKLHI", "JMGKLIH", "JMGLHIK", "JMGLHKI", "JMGLIHK", "JMGLIKH", "JMGLKHI", "JMGLKIH", "JMHGIKL", "JMHGILK", "JMHGKIL", "JMHGKLI", "JMHGLIK", "JMHGLKI", _
		"JMHIGKL", "JMHIGLK", "JMHIKGL", "JMHIKLG", "JMHILGK", "JMHILKG", "JMHKGIL", "JMHKGLI", "JMHKIGL", "JMHKILG", "JMHKLGI", "JMHKLIG", "JMHLGIK", "JMHLGKI", "JMHLIGK", _
		"JMHLIKG", "JMHLKGI", "JMHLKIG", "JMIGHKL", "JMIGHLK", "JMIGKHL", "JMIGKLH", "JMIGLHK", "JMIGLKH", "JMIHGKL", "JMIHGLK", "JMIHKGL", "JMIHKLG", "JMIHLGK", "JMIHLKG", _
		"JMIKGHL", "JMIKGLH", "JMIKHGL", "JMIKHLG", "JMIKLGH", "JMIKLHG", "JMILGHK", "JMILGKH", "JMILHGK", "JMILHKG", "JMILKGH", "JMILKHG", "JMKGHIL", "JMKGHLI", "JMKGIHL", _
		"JMKGILH", "JMKGLHI", "JMKGLIH", "JMKHGIL", "JMKHGLI", "JMKHIGL", "JMKHILG", "JMKHLGI", "JMKHLIG", "JMKIGHL", "JMKIGLH", "JMKIHGL", "JMKIHLG", "JMKILGH", "JMKILHG", _
		"JMKLGHI", "JMKLGIH", "JMKLHGI", "JMKLHIG", "JMKLIGH", "JMKLIHG", "JMLGHIK", "JMLGHKI", "JMLGIHK", "JMLGIKH", "JMLGKHI", "JMLGKIH", "JMLHGIK", "JMLHGKI", "JMLHIGK", _
		"JMLHIKG", "JMLHKGI", "JMLHKIG", "JMLIGHK", "JMLIGKH", "JMLIHGK", "JMLIHKG", "JMLIKGH", "JMLIKHG", "JMLKGHI", "JMLKGIH", "JMLKHGI", "JMLKHIG", "JMLKIGH", "JMLKIHG", _
		"KGHIJLM", "KGHIJML", "KGHILJM", "KGHILMJ", "KGHIMJL", "KGHIMLJ", "KGHJILM", "KGHJIML", "KGHJLIM", "KGHJLMI", "KGHJMIL", "KGHJMLI", "KGHLIJM", "KGHLIMJ", "KGHLJIM", _
		"KGHLJMI", "KGHLMIJ", "KGHLMJI", "KGHMIJL", "KGHMILJ", "KGHMJIL", "KGHMJLI", "KGHMLIJ", "KGHMLJI", "KGIHJLM", "KGIHJML", "KGIHLJM", "KGIHLMJ", "KGIHMJL", "KGIHMLJ", _
		"KGIJHLM", "KGIJHML", "KGIJLHM", "KGIJLMH", "KGIJMHL", "KGIJMLH", "KGILHJM", "KGILHMJ", "KGILJHM", "KGILJMH", "KGILMHJ", "KGILMJH", "KGIMHJL", "KGIMHLJ", "KGIMJHL", _
		"KGIMJLH", "KGIMLHJ", "KGIMLJH", "KGJHILM", "KGJHIML", "KGJHLIM", "KGJHLMI", "KGJHMIL", "KGJHMLI", "KGJIHLM", "KGJIHML", "KGJILHM", "KGJILMH", "KGJIMHL", "KGJIMLH", _
		"KGJLHIM", "KGJLHMI", "KGJLIHM", "KGJLIMH", "KGJLMHI", "KGJLMIH", "KGJMHIL", "KGJMHLI", "KGJMIHL", "KGJMILH", "KGJMLHI", "KGJMLIH", "KGLHIJM", "KGLHIMJ", "KGLHJIM", _
		"KGLHJMI", "KGLHMIJ", "KGLHMJI", "KGLIHJM", "KGLIHMJ", "KGLIJHM", "KGLIJMH", "KGLIMHJ", "KGLIMJH", "KGLJHIM", "KGLJHMI", "KGLJIHM", "KGLJIMH", "KGLJMHI", "KGLJMIH", _
		"KGLMHIJ", "KGLMHJI", "KGLMIHJ", "KGLMIJH", "KGLMJHI", "KGLMJIH", "KGMHIJL", "KGMHILJ", "KGMHJIL", "KGMHJLI", "KGMHLIJ", "KGMHLJI", "KGMIHJL", "KGMIHLJ", "KGMIJHL", _
		"KGMIJLH", "KGMILHJ", "KGMILJH", "KGMJHIL", "KGMJHLI", "KGMJIHL", "KGMJILH", "KGMJLHI", "KGMJLIH", "KGMLHIJ", "KGMLHJI", "KGMLIHJ", "KGMLIJH", "KGMLJHI", "KGMLJIH", _
		"KHGIJLM", "KHGIJML", "KHGILJM", "KHGILMJ", "KHGIMJL", "KHGIMLJ", "KHGJILM", "KHGJIML", "KHGJLIM", "KHGJLMI", "KHGJMIL", "KHGJMLI", "KHGLIJM", "KHGLIMJ", "KHGLJIM", _
		"KHGLJMI", "KHGLMIJ", "KHGLMJI", "KHGMIJL", "KHGMILJ", "KHGMJIL", "KHGMJLI", "KHGMLIJ", "KHGMLJI", "KHIGJLM", "KHIGJML", "KHIGLJM", "KHIGLMJ", "KHIGMJL", "KHIGMLJ", _
		"KHIJGLM", "KHIJGML", "KHIJLGM", "KHIJLMG", "KHIJMGL", "KHIJMLG", "KHILGJM", "KHILGMJ", "KHILJGM", "KHILJMG", "KHILMGJ", "KHILMJG", "KHIMGJL", "KHIMGLJ", "KHIMJGL", _
		"KHIMJLG", "KHIMLGJ", "KHIMLJG", "KHJGILM", "KHJGIML", "KHJGLIM", "KHJGLMI", "KHJGMIL", "KHJGMLI", "KHJIGLM", "KHJIGML", "KHJILGM", "KHJILMG", "KHJIMGL", "KHJIMLG", _
		"KHJLGIM", "KHJLGMI", "KHJLIGM", "KHJLIMG", "KHJLMGI", "KHJLMIG", "KHJMGIL", "KHJMGLI", "KHJMIGL", "KHJMILG", "KHJMLGI", "KHJMLIG", "KHLGIJM", "KHLGIMJ", "KHLGJIM", _
		"KHLGJMI", "KHLGMIJ", "KHLGMJI", "KHLIGJM", "KHLIGMJ", "KHLIJGM", "KHLIJMG", "KHLIMGJ", "KHLIMJG", "KHLJGIM", "KHLJGMI", "KHLJIGM", "KHLJIMG", "KHLJMGI", "KHLJMIG", _
		"KHLMGIJ", "KHLMGJI", "KHLMIGJ", "KHLMIJG", "KHLMJGI", "KHLMJIG", "KHMGIJL", "KHMGILJ", "KHMGJIL", "KHMGJLI", "KHMGLIJ", "KHMGLJI", "KHMIGJL", "KHMIGLJ", "KHMIJGL", _
		"KHMIJLG", "KHMILGJ", "KHMILJG", "KHMJGIL", "KHMJGLI", "KHMJIGL", "KHMJILG", "KHMJLGI", "KHMJLIG", "KHMLGIJ", "KHMLGJI", "KHMLIGJ", "KHMLIJG", "KHMLJGI", "KHMLJIG", _
		"KIGHJLM", "KIGHJML", "KIGHLJM", "KIGHLMJ", "KIGHMJL", "KIGHMLJ", "KIGJHLM", "KIGJHML", "KIGJLHM", "KIGJLMH", "KIGJMHL", "KIGJMLH", "KIGLHJM", "KIGLHMJ", "KIGLJHM", _
		"KIGLJMH", "KIGLMHJ", "KIGLMJH", "KIGMHJL", "KIGMHLJ", "KIGMJHL", "KIGMJLH", "KIGMLHJ", "KIGMLJH", "KIHGJLM", "KIHGJML", "KIHGLJM", "KIHGLMJ", "KIHGMJL", "KIHGMLJ", _
		"KIHJGLM", "KIHJGML", "KIHJLGM", "KIHJLMG", "KIHJMGL", "KIHJMLG", "KIHLGJM", "KIHLGMJ", "KIHLJGM", "KIHLJMG", "KIHLMGJ", "KIHLMJG", "KIHMGJL", "KIHMGLJ", "KIHMJGL", _
		"KIHMJLG", "KIHMLGJ", "KIHMLJG", "KIJGHLM", "KIJGHML", "KIJGLHM", "KIJGLMH", "KIJGMHL", "KIJGMLH", "KIJHGLM", "KIJHGML", "KIJHLGM", "KIJHLMG", "KIJHMGL", "KIJHMLG", _
		"KIJLGHM", "KIJLGMH", "KIJLHGM", "KIJLHMG", "KIJLMGH", "KIJLMHG", "KIJMGHL", "KIJMGLH", "KIJMHGL", "KIJMHLG", "KIJMLGH", "KIJMLHG", "KILGHJM", "KILGHMJ", "KILGJHM", _
		"KILGJMH", "KILGMHJ", "KILGMJH", "KILHGJM", "KILHGMJ", "KILHJGM", "KILHJMG", "KILHMGJ", "KILHMJG", "KILJGHM", "KILJGMH", "KILJHGM", "KILJHMG", "KILJMGH", "KILJMHG", _
		"KILMGHJ", "KILMGJH", "KILMHGJ", "KILMHJG", "KILMJGH", "KILMJHG", "KIMGHJL", "KIMGHLJ", "KIMGJHL", "KIMGJLH", "KIMGLHJ", "KIMGLJH", "KIMHGJL", "KIMHGLJ", "KIMHJGL", _
		"KIMHJLG", "KIMHLGJ", "KIMHLJG", "KIMJGHL", "KIMJGLH", "KIMJHGL", "KIMJHLG", "KIMJLGH", "KIMJLHG", "KIMLGHJ", "KIMLGJH", "KIMLHGJ", "KIMLHJG", "KIMLJGH", "KIMLJHG", _
		"KJGHILM", "KJGHIML", "KJGHLIM", "KJGHLMI", "KJGHMIL", "KJGHMLI", "KJGIHLM", "KJGIHML", "KJGILHM", "KJGILMH", "KJGIMHL", "KJGIMLH", "KJGLHIM", "KJGLHMI", "KJGLIHM", _
		"KJGLIMH", "KJGLMHI", "KJGLMIH", "KJGMHIL", "KJGMHLI", "KJGMIHL", "KJGMILH", "KJGMLHI", "KJGMLIH", "KJHGILM", "KJHGIML", "KJHGLIM", "KJHGLMI", "KJHGMIL", "KJHGMLI", _
		"KJHIGLM", "KJHIGML", "KJHILGM", "KJHILMG", "KJHIMGL", "KJHIMLG", "KJHLGIM", "KJHLGMI", "KJHLIGM", "KJHLIMG", "KJHLMGI", "KJHLMIG", "KJHMGIL", "KJHMGLI", "KJHMIGL", _
		"KJHMILG", "KJHMLGI", "KJHMLIG", "KJIGHLM", "KJIGHML", "KJIGLHM", "KJIGLMH", "KJIGMHL", "KJIGMLH", "KJIHGLM", "KJIHGML", "KJIHLGM", "KJIHLMG", "KJIHMGL", "KJIHMLG", _
		"KJILGHM", "KJILGMH", "KJILHGM", "KJILHMG", "KJILMGH", "KJILMHG", "KJIMGHL", "KJIMGLH", "KJIMHGL", "KJIMHLG", "KJIMLGH", "KJIMLHG", "KJLGHIM", "KJLGHMI", "KJLGIHM", _
		"KJLGIMH", "KJLGMHI", "KJLGMIH", "KJLHGIM", "KJLHGMI", "KJLHIGM", "KJLHIMG", "KJLHMGI", "KJLHMIG", "KJLIGHM", "KJLIGMH", "KJLIHGM", "KJLIHMG", "KJLIMGH", "KJLIMHG", _
		"KJLMGHI", "KJLMGIH", "KJLMHGI", "KJLMHIG", "KJLMIGH", "KJLMIHG", "KJMGHIL", "KJMGHLI", "KJMGIHL", "KJMGILH", "KJMGLHI", "KJMGLIH", "KJMHGIL", "KJMHGLI", "KJMHIGL", _
		"KJMHILG", "KJMHLGI", "KJMHLIG", "KJMIGHL", "KJMIGLH", "KJMIHGL", "KJMIHLG", "KJMILGH", "KJMILHG", "KJMLGHI", "KJMLGIH", "KJMLHGI", "KJMLHIG", "KJMLIGH", "KJMLIHG", _
		"KLGHIJM", "KLGHIMJ", "KLGHJIM", "KLGHJMI", "KLGHMIJ", "KLGHMJI", "KLGIHJM", "KLGIHMJ", "KLGIJHM", "KLGIJMH", "KLGIMHJ", "KLGIMJH", "KLGJHIM", "KLGJHMI", "KLGJIHM", _
		"KLGJIMH", "KLGJMHI", "KLGJMIH", "KLGMHIJ", "KLGMHJI", "KLGMIHJ", "KLGMIJH", "KLGMJHI", "KLGMJIH", "KLHGIJM", "KLHGIMJ", "KLHGJIM", "KLHGJMI", "KLHGMIJ", "KLHGMJI", _
		"KLHIGJM", "KLHIGMJ", "KLHIJGM", "KLHIJMG", "KLHIMGJ", "KLHIMJG", "KLHJGIM", "KLHJGMI", "KLHJIGM", "KLHJIMG", "KLHJMGI", "KLHJMIG", "KLHMGIJ", "KLHMGJI", "KLHMIGJ", _
		"KLHMIJG", "KLHMJGI", "KLHMJIG", "KLIGHJM", "KLIGHMJ", "KLIGJHM", "KLIGJMH", "KLIGMHJ", "KLIGMJH", "KLIHGJM", "KLIHGMJ", "KLIHJGM", "KLIHJMG", "KLIHMGJ", "KLIHMJG", _
		"KLIJGHM", "KLIJGMH", "KLIJHGM", "KLIJHMG", "KLIJMGH", "KLIJMHG", "KLIMGHJ", "KLIMGJH", "KLIMHGJ", "KLIMHJG", "KLIMJGH", "KLIMJHG", "KLJGHIM", "KLJGHMI", "KLJGIHM", _
		"KLJGIMH", "KLJGMHI", "KLJGMIH", "KLJHGIM", "KLJHGMI", "KLJHIGM", "KLJHIMG", "KLJHMGI", "KLJHMIG", "KLJIGHM", "KLJIGMH", "KLJIHGM", "KLJIHMG", "KLJIMGH", "KLJIMHG", _
		"KLJMGHI", "KLJMGIH", "KLJMHGI", "KLJMHIG", "KLJMIGH", "KLJMIHG", "KLMGHIJ", "KLMGHJI", "KLMGIHJ", "KLMGIJH", "KLMGJHI", "KLMGJIH", "KLMHGIJ", "KLMHGJI", "KLMHIGJ", _
		"KLMHIJG", "KLMHJGI", "KLMHJIG", "KLMIGHJ", "KLMIGJH", "KLMIHGJ", "KLMIHJG", "KLMIJGH", "KLMIJHG", "KLMJGHI", "KLMJGIH", "KLMJHGI", "KLMJHIG", "KLMJIGH", "KLMJIHG", _
		"KMGHIJL", "KMGHILJ", "KMGHJIL", "KMGHJLI", "KMGHLIJ", "KMGHLJI", "KMGIHJL", "KMGIHLJ", "KMGIJHL", "KMGIJLH", "KMGILHJ", "KMGILJH", "KMGJHIL", "KMGJHLI", "KMGJIHL", _
		"KMGJILH", "KMGJLHI", "KMGJLIH", "KMGLHIJ", "KMGLHJI", "KMGLIHJ", "KMGLIJH", "KMGLJHI", "KMGLJIH", "KMHGIJL", "KMHGILJ", "KMHGJIL", "KMHGJLI", "KMHGLIJ", "KMHGLJI", _
		"KMHIGJL", "KMHIGLJ", "KMHIJGL", "KMHIJLG", "KMHILGJ", "KMHILJG", "KMHJGIL", "KMHJGLI", "KMHJIGL", "KMHJILG", "KMHJLGI", "KMHJLIG", "KMHLGIJ", "KMHLGJI", "KMHLIGJ", _
		"KMHLIJG", "KMHLJGI", "KMHLJIG", "KMIGHJL", "KMIGHLJ", "KMIGJHL", "KMIGJLH", "KMIGLHJ", "KMIGLJH", "KMIHGJL", "KMIHGLJ", "KMIHJGL", "KMIHJLG", "KMIHLGJ", "KMIHLJG", _
		"KMIJGHL", "KMIJGLH", "KMIJHGL", "KMIJHLG", "KMIJLGH", "KMIJLHG", "KMILGHJ", "KMILGJH", "KMILHGJ", "KMILHJG", "KMILJGH", "KMILJHG", "KMJGHIL", "KMJGHLI", "KMJGIHL", _
		"KMJGILH", "KMJGLHI", "KMJGLIH", "KMJHGIL", "KMJHGLI", "KMJHIGL", "KMJHILG", "KMJHLGI", "KMJHLIG", "KMJIGHL", "KMJIGLH", "KMJIHGL", "KMJIHLG", "KMJILGH", "KMJILHG", _
		"KMJLGHI", "KMJLGIH", "KMJLHGI", "KMJLHIG", "KMJLIGH", "KMJLIHG", "KMLGHIJ", "KMLGHJI", "KMLGIHJ", "KMLGIJH", "KMLGJHI", "KMLGJIH", "KMLHGIJ", "KMLHGJI", "KMLHIGJ", _
		"KMLHIJG", "KMLHJGI", "KMLHJIG", "KMLIGHJ", "KMLIGJH", "KMLIHGJ", "KMLIHJG", "KMLIJGH", "KMLIJHG", "KMLJGHI", "KMLJGIH", "KMLJHGI", "KMLJHIG", "KMLJIGH", "KMLJIHG", _
		"LGHIJKM", "LGHIJMK", "LGHIKJM", "LGHIKMJ", "LGHIMJK", "LGHIMKJ", "LGHJIKM", "LGHJIMK", "LGHJKIM", "LGHJKMI", "LGHJMIK", "LGHJMKI", "LGHKIJM", "LGHKIMJ", "LGHKJIM", _
		"LGHKJMI", "LGHKMIJ", "LGHKMJI", "LGHMIJK", "LGHMIKJ", "LGHMJIK", "LGHMJKI", "LGHMKIJ", "LGHMKJI", "LGIHJKM", "LGIHJMK", "LGIHKJM", "LGIHKMJ", "LGIHMJK", "LGIHMKJ", _
		"LGIJHKM", "LGIJHMK", "LGIJKHM", "LGIJKMH", "LGIJMHK", "LGIJMKH", "LGIKHJM", "LGIKHMJ", "LGIKJHM", "LGIKJMH", "LGIKMHJ", "LGIKMJH", "LGIMHJK", "LGIMHKJ", "LGIMJHK", _
		"LGIMJKH", "LGIMKHJ", "LGIMKJH", "LGJHIKM", "LGJHIMK", "LGJHKIM", "LGJHKMI", "LGJHMIK", "LGJHMKI", "LGJIHKM", "LGJIHMK", "LGJIKHM", "LGJIKMH", "LGJIMHK", "LGJIMKH", _
		"LGJKHIM", "LGJKHMI", "LGJKIHM", "LGJKIMH", "LGJKMHI", "LGJKMIH", "LGJMHIK", "LGJMHKI", "LGJMIHK", "LGJMIKH", "LGJMKHI", "LGJMKIH", "LGKHIJM", "LGKHIMJ", "LGKHJIM", _
		"LGKHJMI", "LGKHMIJ", "LGKHMJI", "LGKIHJM", "LGKIHMJ", "LGKIJHM", "LGKIJMH", "LGKIMHJ", "LGKIMJH", "LGKJHIM", "LGKJHMI", "LGKJIHM", "LGKJIMH", "LGKJMHI", "LGKJMIH", _
		"LGKMHIJ", "LGKMHJI", "LGKMIHJ", "LGKMIJH", "LGKMJHI", "LGKMJIH", "LGMHIJK", "LGMHIKJ", "LGMHJIK", "LGMHJKI", "LGMHKIJ", "LGMHKJI", "LGMIHJK", "LGMIHKJ", "LGMIJHK", _
		"LGMIJKH", "LGMIKHJ", "LGMIKJH", "LGMJHIK", "LGMJHKI", "LGMJIHK", "LGMJIKH", "LGMJKHI", "LGMJKIH", "LGMKHIJ", "LGMKHJI", "LGMKIHJ", "LGMKIJH", "LGMKJHI", "LGMKJIH", _
		"LHGIJKM", "LHGIJMK", "LHGIKJM", "LHGIKMJ", "LHGIMJK", "LHGIMKJ", "LHGJIKM", "LHGJIMK", "LHGJKIM", "LHGJKMI", "LHGJMIK", "LHGJMKI", "LHGKIJM", "LHGKIMJ", "LHGKJIM", _
		"LHGKJMI", "LHGKMIJ", "LHGKMJI", "LHGMIJK", "LHGMIKJ", "LHGMJIK", "LHGMJKI", "LHGMKIJ", "LHGMKJI", "LHIGJKM", "LHIGJMK", "LHIGKJM", "LHIGKMJ", "LHIGMJK", "LHIGMKJ", _
		"LHIJGKM", "LHIJGMK", "LHIJKGM", "LHIJKMG", "LHIJMGK", "LHIJMKG", "LHIKGJM", "LHIKGMJ", "LHIKJGM", "LHIKJMG", "LHIKMGJ", "LHIKMJG", "LHIMGJK", "LHIMGKJ", "LHIMJGK", _
		"LHIMJKG", "LHIMKGJ", "LHIMKJG", "LHJGIKM", "LHJGIMK", "LHJGKIM", "LHJGKMI", "LHJGMIK", "LHJGMKI", "LHJIGKM", "LHJIGMK", "LHJIKGM", "LHJIKMG", "LHJIMGK", "LHJIMKG", _
		"LHJKGIM", "LHJKGMI", "LHJKIGM", "LHJKIMG", "LHJKMGI", "LHJKMIG", "LHJMGIK", "LHJMGKI", "LHJMIGK", "LHJMIKG", "LHJMKGI", "LHJMKIG", "LHKGIJM", "LHKGIMJ", "LHKGJIM", _
		"LHKGJMI", "LHKGMIJ", "LHKGMJI", "LHKIGJM", "LHKIGMJ", "LHKIJGM", "LHKIJMG", "LHKIMGJ", "LHKIMJG", "LHKJGIM", "LHKJGMI", "LHKJIGM", "LHKJIMG", "LHKJMGI", "LHKJMIG", _
		"LHKMGIJ", "LHKMGJI", "LHKMIGJ", "LHKMIJG", "LHKMJGI", "LHKMJIG", "LHMGIJK", "LHMGIKJ", "LHMGJIK", "LHMGJKI", "LHMGKIJ", "LHMGKJI", "LHMIGJK", "LHMIGKJ", "LHMIJGK", _
		"LHMIJKG", "LHMIKGJ", "LHMIKJG", "LHMJGIK", "LHMJGKI", "LHMJIGK", "LHMJIKG", "LHMJKGI", "LHMJKIG", "LHMKGIJ", "LHMKGJI", "LHMKIGJ", "LHMKIJG", "LHMKJGI", "LHMKJIG", _
		"LIGHJKM", "LIGHJMK", "LIGHKJM", "LIGHKMJ", "LIGHMJK", "LIGHMKJ", "LIGJHKM", "LIGJHMK", "LIGJKHM", "LIGJKMH", "LIGJMHK", "LIGJMKH", "LIGKHJM", "LIGKHMJ", "LIGKJHM", _
		"LIGKJMH", "LIGKMHJ", "LIGKMJH", "LIGMHJK", "LIGMHKJ", "LIGMJHK", "LIGMJKH", "LIGMKHJ", "LIGMKJH", "LIHGJKM", "LIHGJMK", "LIHGKJM", "LIHGKMJ", "LIHGMJK", "LIHGMKJ", _
		"LIHJGKM", "LIHJGMK", "LIHJKGM", "LIHJKMG", "LIHJMGK", "LIHJMKG", "LIHKGJM", "LIHKGMJ", "LIHKJGM", "LIHKJMG", "LIHKMGJ", "LIHKMJG", "LIHMGJK", "LIHMGKJ", "LIHMJGK", _
		"LIHMJKG", "LIHMKGJ", "LIHMKJG", "LIJGHKM", "LIJGHMK", "LIJGKHM", "LIJGKMH", "LIJGMHK", "LIJGMKH", "LIJHGKM", "LIJHGMK", "LIJHKGM", "LIJHKMG", "LIJHMGK", "LIJHMKG", _
		"LIJKGHM", "LIJKGMH", "LIJKHGM", "LIJKHMG", "LIJKMGH", "LIJKMHG", "LIJMGHK", "LIJMGKH", "LIJMHGK", "LIJMHKG", "LIJMKGH", "LIJMKHG", "LIKGHJM", "LIKGHMJ", "LIKGJHM", _
		"LIKGJMH", "LIKGMHJ", "LIKGMJH", "LIKHGJM", "LIKHGMJ", "LIKHJGM", "LIKHJMG", "LIKHMGJ", "LIKHMJG", "LIKJGHM", "LIKJGMH", "LIKJHGM", "LIKJHMG", "LIKJMGH", "LIKJMHG", _
		"LIKMGHJ", "LIKMGJH", "LIKMHGJ", "LIKMHJG", "LIKMJGH", "LIKMJHG", "LIMGHJK", "LIMGHKJ", "LIMGJHK", "LIMGJKH", "LIMGKHJ", "LIMGKJH", "LIMHGJK", "LIMHGKJ", "LIMHJGK", _
		"LIMHJKG", "LIMHKGJ", "LIMHKJG", "LIMJGHK", "LIMJGKH", "LIMJHGK", "LIMJHKG", "LIMJKGH", "LIMJKHG", "LIMKGHJ", "LIMKGJH", "LIMKHGJ", "LIMKHJG", "LIMKJGH", "LIMKJHG", _
		"LJGHIKM", "LJGHIMK", "LJGHKIM", "LJGHKMI", "LJGHMIK", "LJGHMKI", "LJGIHKM", "LJGIHMK", "LJGIKHM", "LJGIKMH", "LJGIMHK", "LJGIMKH", "LJGKHIM", "LJGKHMI", "LJGKIHM", _
		"LJGKIMH", "LJGKMHI", "LJGKMIH", "LJGMHIK", "LJGMHKI", "LJGMIHK", "LJGMIKH", "LJGMKHI", "LJGMKIH", "LJHGIKM", "LJHGIMK", "LJHGKIM", "LJHGKMI", "LJHGMIK", "LJHGMKI", _
		"LJHIGKM", "LJHIGMK", "LJHIKGM", "LJHIKMG", "LJHIMGK", "LJHIMKG", "LJHKGIM", "LJHKGMI", "LJHKIGM", "LJHKIMG", "LJHKMGI", "LJHKMIG", "LJHMGIK", "LJHMGKI", "LJHMIGK", _
		"LJHMIKG", "LJHMKGI", "LJHMKIG", "LJIGHKM", "LJIGHMK", "LJIGKHM", "LJIGKMH", "LJIGMHK", "LJIGMKH", "LJIHGKM", "LJIHGMK", "LJIHKGM", "LJIHKMG", "LJIHMGK", "LJIHMKG", _
		"LJIKGHM", "LJIKGMH", "LJIKHGM", "LJIKHMG", "LJIKMGH", "LJIKMHG", "LJIMGHK", "LJIMGKH", "LJIMHGK", "LJIMHKG", "LJIMKGH", "LJIMKHG", "LJKGHIM", "LJKGHMI", "LJKGIHM", _
		"LJKGIMH", "LJKGMHI", "LJKGMIH", "LJKHGIM", "LJKHGMI", "LJKHIGM", "LJKHIMG", "LJKHMGI", "LJKHMIG", "LJKIGHM", "LJKIGMH", "LJKIHGM", "LJKIHMG", "LJKIMGH", "LJKIMHG", _
		"LJKMGHI", "LJKMGIH", "LJKMHGI", "LJKMHIG", "LJKMIGH", "LJKMIHG", "LJMGHIK", "LJMGHKI", "LJMGIHK", "LJMGIKH", "LJMGKHI", "LJMGKIH", "LJMHGIK", "LJMHGKI", "LJMHIGK", _
		"LJMHIKG", "LJMHKGI", "LJMHKIG", "LJMIGHK", "LJMIGKH", "LJMIHGK", "LJMIHKG", "LJMIKGH", "LJMIKHG", "LJMKGHI", "LJMKGIH", "LJMKHGI", "LJMKHIG", "LJMKIGH", "LJMKIHG", _
		"LKGHIJM", "LKGHIMJ", "LKGHJIM", "LKGHJMI", "LKGHMIJ", "LKGHMJI", "LKGIHJM", "LKGIHMJ", "LKGIJHM", "LKGIJMH", "LKGIMHJ", "LKGIMJH", "LKGJHIM", "LKGJHMI", "LKGJIHM", _
		"LKGJIMH", "LKGJMHI", "LKGJMIH", "LKGMHIJ", "LKGMHJI", "LKGMIHJ", "LKGMIJH", "LKGMJHI", "LKGMJIH", "LKHGIJM", "LKHGIMJ", "LKHGJIM", "LKHGJMI", "LKHGMIJ", "LKHGMJI", _
		"LKHIGJM", "LKHIGMJ", "LKHIJGM", "LKHIJMG", "LKHIMGJ", "LKHIMJG", "LKHJGIM", "LKHJGMI", "LKHJIGM", "LKHJIMG", "LKHJMGI", "LKHJMIG", "LKHMGIJ", "LKHMGJI", "LKHMIGJ", _
		"LKHMIJG", "LKHMJGI", "LKHMJIG", "LKIGHJM", "LKIGHMJ", "LKIGJHM", "LKIGJMH", "LKIGMHJ", "LKIGMJH", "LKIHGJM", "LKIHGMJ", "LKIHJGM", "LKIHJMG", "LKIHMGJ", "LKIHMJG", _
		"LKIJGHM", "LKIJGMH", "LKIJHGM", "LKIJHMG", "LKIJMGH", "LKIJMHG", "LKIMGHJ", "LKIMGJH", "LKIMHGJ", "LKIMHJG", "LKIMJGH", "LKIMJHG", "LKJGHIM", "LKJGHMI", "LKJGIHM", _
		"LKJGIMH", "LKJGMHI", "LKJGMIH", "LKJHGIM", "LKJHGMI", "LKJHIGM", "LKJHIMG", "LKJHMGI", "LKJHMIG", "LKJIGHM", "LKJIGMH", "LKJIHGM", "LKJIHMG", "LKJIMGH", "LKJIMHG", _
		"LKJMGHI", "LKJMGIH", "LKJMHGI", "LKJMHIG", "LKJMIGH", "LKJMIHG", "LKMGHIJ", "LKMGHJI", "LKMGIHJ", "LKMGIJH", "LKMGJHI", "LKMGJIH", "LKMHGIJ", "LKMHGJI", "LKMHIGJ", _
		"LKMHIJG", "LKMHJGI", "LKMHJIG", "LKMIGHJ", "LKMIGJH", "LKMIHGJ", "LKMIHJG", "LKMIJGH", "LKMIJHG", "LKMJGHI", "LKMJGIH", "LKMJHGI", "LKMJHIG", "LKMJIGH", "LKMJIHG", _
		"LMGHIJK", "LMGHIKJ", "LMGHJIK", "LMGHJKI", "LMGHKIJ", "LMGHKJI", "LMGIHJK", "LMGIHKJ", "LMGIJHK", "LMGIJKH", "LMGIKHJ", "LMGIKJH", "LMGJHIK", "LMGJHKI", "LMGJIHK", _
		"LMGJIKH", "LMGJKHI", "LMGJKIH", "LMGKHIJ", "LMGKHJI", "LMGKIHJ", "LMGKIJH", "LMGKJHI", "LMGKJIH", "LMHGIJK", "LMHGIKJ", "LMHGJIK", "LMHGJKI", "LMHGKIJ", "LMHGKJI", _
		"LMHIGJK", "LMHIGKJ", "LMHIJGK", "LMHIJKG", "LMHIKGJ", "LMHIKJG", "LMHJGIK", "LMHJGKI", "LMHJIGK", "LMHJIKG", "LMHJKGI", "LMHJKIG", "LMHKGIJ", "LMHKGJI", "LMHKIGJ", _
		"LMHKIJG", "LMHKJGI", "LMHKJIG", "LMIGHJK", "LMIGHKJ", "LMIGJHK", "LMIGJKH", "LMIGKHJ", "LMIGKJH", "LMIHGJK", "LMIHGKJ", "LMIHJGK", "LMIHJKG", "LMIHKGJ", "LMIHKJG", _
		"LMIJGHK", "LMIJGKH", "LMIJHGK", "LMIJHKG", "LMIJKGH", "LMIJKHG", "LMIKGHJ", "LMIKGJH", "LMIKHGJ", "LMIKHJG", "LMIKJGH", "LMIKJHG", "LMJGHIK", "LMJGHKI", "LMJGIHK", _
		"LMJGIKH", "LMJGKHI", "LMJGKIH", "LMJHGIK", "LMJHGKI", "LMJHIGK", "LMJHIKG", "LMJHKGI", "LMJHKIG", "LMJIGHK", "LMJIGKH", "LMJIHGK", "LMJIHKG", "LMJIKGH", "LMJIKHG", _
		"LMJKGHI", "LMJKGIH", "LMJKHGI", "LMJKHIG", "LMJKIGH", "LMJKIHG", "LMKGHIJ", "LMKGHJI", "LMKGIHJ", "LMKGIJH", "LMKGJHI", "LMKGJIH", "LMKHGIJ", "LMKHGJI", "LMKHIGJ", _
		"LMKHIJG", "LMKHJGI", "LMKHJIG", "LMKIGHJ", "LMKIGJH", "LMKIHGJ", "LMKIHJG", "LMKIJGH", "LMKIJHG", "LMKJGHI", "LMKJGIH", "LMKJHGI", "LMKJHIG", "LMKJIGH", "LMKJIHG", _
		"MGHIJKL", "MGHIJLK", "MGHIKJL", "MGHIKLJ", "MGHILJK", "MGHILKJ", "MGHJIKL", "MGHJILK", "MGHJKIL", "MGHJKLI", "MGHJLIK", "MGHJLKI", "MGHKIJL", "MGHKILJ", "MGHKJIL", _
		"MGHKJLI", "MGHKLIJ", "MGHKLJI", "MGHLIJK", "MGHLIKJ", "MGHLJIK", "MGHLJKI", "MGHLKIJ", "MGHLKJI", "MGIHJKL", "MGIHJLK", "MGIHKJL", "MGIHKLJ", "MGIHLJK", "MGIHLKJ", _
		"MGIJHKL", "MGIJHLK", "MGIJKHL", "MGIJKLH", "MGIJLHK", "MGIJLKH", "MGIKHJL", "MGIKHLJ", "MGIKJHL", "MGIKJLH", "MGIKLHJ", "MGIKLJH", "MGILHJK", "MGILHKJ", "MGILJHK", _
		"MGILJKH", "MGILKHJ", "MGILKJH", "MGJHIKL", "MGJHILK", "MGJHKIL", "MGJHKLI", "MGJHLIK", "MGJHLKI", "MGJIHKL", "MGJIHLK", "MGJIKHL", "MGJIKLH", "MGJILHK", "MGJILKH", _
		"MGJKHIL", "MGJKHLI", "MGJKIHL", "MGJKILH", "MGJKLHI", "MGJKLIH", "MGJLHIK", "MGJLHKI", "MGJLIHK", "MGJLIKH", "MGJLKHI", "MGJLKIH", "MGKHIJL", "MGKHILJ", "MGKHJIL", _
		"MGKHJLI", "MGKHLIJ", "MGKHLJI", "MGKIHJL", "MGKIHLJ", "MGKIJHL", "MGKIJLH", "MGKILHJ", "MGKILJH", "MGKJHIL", "MGKJHLI", "MGKJIHL", "MGKJILH", "MGKJLHI", "MGKJLIH", _
		"MGKLHIJ", "MGKLHJI", "MGKLIHJ", "MGKLIJH", "MGKLJHI", "MGKLJIH", "MGLHIJK", "MGLHIKJ", "MGLHJIK", "MGLHJKI", "MGLHKIJ", "MGLHKJI", "MGLIHJK", "MGLIHKJ", "MGLIJHK", _
		"MGLIJKH", "MGLIKHJ", "MGLIKJH", "MGLJHIK", "MGLJHKI", "MGLJIHK", "MGLJIKH", "MGLJKHI", "MGLJKIH", "MGLKHIJ", "MGLKHJI", "MGLKIHJ", "MGLKIJH", "MGLKJHI", "MGLKJIH", _
		"MHGIJKL", "MHGIJLK", "MHGIKJL", "MHGIKLJ", "MHGILJK", "MHGILKJ", "MHGJIKL", "MHGJILK", "MHGJKIL", "MHGJKLI", "MHGJLIK", "MHGJLKI", "MHGKIJL", "MHGKILJ", "MHGKJIL", _
		"MHGKJLI", "MHGKLIJ", "MHGKLJI", "MHGLIJK", "MHGLIKJ", "MHGLJIK", "MHGLJKI", "MHGLKIJ", "MHGLKJI", "MHIGJKL", "MHIGJLK", "MHIGKJL", "MHIGKLJ", "MHIGLJK", "MHIGLKJ", _
		"MHIJGKL", "MHIJGLK", "MHIJKGL", "MHIJKLG", "MHIJLGK", "MHIJLKG", "MHIKGJL", "MHIKGLJ", "MHIKJGL", "MHIKJLG", "MHIKLGJ", "MHIKLJG", "MHILGJK", "MHILGKJ", "MHILJGK", _
		"MHILJKG", "MHILKGJ", "MHILKJG", "MHJGIKL", "MHJGILK", "MHJGKIL", "MHJGKLI", "MHJGLIK", "MHJGLKI", "MHJIGKL", "MHJIGLK", "MHJIKGL", "MHJIKLG", "MHJILGK", "MHJILKG", _
		"MHJKGIL", "MHJKGLI", "MHJKIGL", "MHJKILG", "MHJKLGI", "MHJKLIG", "MHJLGIK", "MHJLGKI", "MHJLIGK", "MHJLIKG", "MHJLKGI", "MHJLKIG", "MHKGIJL", "MHKGILJ", "MHKGJIL", _
		"MHKGJLI", "MHKGLIJ", "MHKGLJI", "MHKIGJL", "MHKIGLJ", "MHKIJGL", "MHKIJLG", "MHKILGJ", "MHKILJG", "MHKJGIL", "MHKJGLI", "MHKJIGL", "MHKJILG", "MHKJLGI", "MHKJLIG", _
		"MHKLGIJ", "MHKLGJI", "MHKLIGJ", "MHKLIJG", "MHKLJGI", "MHKLJIG", "MHLGIJK", "MHLGIKJ", "MHLGJIK", "MHLGJKI", "MHLGKIJ", "MHLGKJI", "MHLIGJK", "MHLIGKJ", "MHLIJGK", _
		"MHLIJKG", "MHLIKGJ", "MHLIKJG", "MHLJGIK", "MHLJGKI", "MHLJIGK", "MHLJIKG", "MHLJKGI", "MHLJKIG", "MHLKGIJ", "MHLKGJI", "MHLKIGJ", "MHLKIJG", "MHLKJGI", "MHLKJIG", _
		"MIGHJKL", "MIGHJLK", "MIGHKJL", "MIGHKLJ", "MIGHLJK", "MIGHLKJ", "MIGJHKL", "MIGJHLK", "MIGJKHL", "MIGJKLH", "MIGJLHK", "MIGJLKH", "MIGKHJL", "MIGKHLJ", "MIGKJHL", _
		"MIGKJLH", "MIGKLHJ", "MIGKLJH", "MIGLHJK", "MIGLHKJ", "MIGLJHK", "MIGLJKH", "MIGLKHJ", "MIGLKJH", "MIHGJKL", "MIHGJLK", "MIHGKJL", "MIHGKLJ", "MIHGLJK", "MIHGLKJ", _
		"MIHJGKL", "MIHJGLK", "MIHJKGL", "MIHJKLG", "MIHJLGK", "MIHJLKG", "MIHKGJL", "MIHKGLJ", "MIHKJGL", "MIHKJLG", "MIHKLGJ", "MIHKLJG", "MIHLGJK", "MIHLGKJ", "MIHLJGK", _
		"MIHLJKG", "MIHLKGJ", "MIHLKJG", "MIJGHKL", "MIJGHLK", "MIJGKHL", "MIJGKLH", "MIJGLHK", "MIJGLKH", "MIJHGKL", "MIJHGLK", "MIJHKGL", "MIJHKLG", "MIJHLGK", "MIJHLKG", _
		"MIJKGHL", "MIJKGLH", "MIJKHGL", "MIJKHLG", "MIJKLGH", "MIJKLHG", "MIJLGHK", "MIJLGKH", "MIJLHGK", "MIJLHKG", "MIJLKGH", "MIJLKHG", "MIKGHJL", "MIKGHLJ", "MIKGJHL", _
		"MIKGJLH", "MIKGLHJ", "MIKGLJH", "MIKHGJL", "MIKHGLJ", "MIKHJGL", "MIKHJLG", "MIKHLGJ", "MIKHLJG", "MIKJGHL", "MIKJGLH", "MIKJHGL", "MIKJHLG", "MIKJLGH", "MIKJLHG", _
		"MIKLGHJ", "MIKLGJH", "MIKLHGJ", "MIKLHJG", "MIKLJGH", "MIKLJHG", "MILGHJK", "MILGHKJ", "MILGJHK", "MILGJKH", "MILGKHJ", "MILGKJH", "MILHGJK", "MILHGKJ", "MILHJGK", _
		"MILHJKG", "MILHKGJ", "MILHKJG", "MILJGHK", "MILJGKH", "MILJHGK", "MILJHKG", "MILJKGH", "MILJKHG", "MILKGHJ", "MILKGJH", "MILKHGJ", "MILKHJG", "MILKJGH", "MILKJHG", _
		"MJGHIKL", "MJGHILK", "MJGHKIL", "MJGHKLI", "MJGHLIK", "MJGHLKI", "MJGIHKL", "MJGIHLK", "MJGIKHL", "MJGIKLH", "MJGILHK", "MJGILKH", "MJGKHIL", "MJGKHLI", "MJGKIHL", _
		"MJGKILH", "MJGKLHI", "MJGKLIH", "MJGLHIK", "MJGLHKI", "MJGLIHK", "MJGLIKH", "MJGLKHI", "MJGLKIH", "MJHGIKL", "MJHGILK", "MJHGKIL", "MJHGKLI", "MJHGLIK", "MJHGLKI", _
		"MJHIGKL", "MJHIGLK", "MJHIKGL", "MJHIKLG", "MJHILGK", "MJHILKG", "MJHKGIL", "MJHKGLI", "MJHKIGL", "MJHKILG", "MJHKLGI", "MJHKLIG", "MJHLGIK", "MJHLGKI", "MJHLIGK", _
		"MJHLIKG", "MJHLKGI", "MJHLKIG", "MJIGHKL", "MJIGHLK", "MJIGKHL", "MJIGKLH", "MJIGLHK", "MJIGLKH", "MJIHGKL", "MJIHGLK", "MJIHKGL", "MJIHKLG", "MJIHLGK", "MJIHLKG", _
		"MJIKGHL", "MJIKGLH", "MJIKHGL", "MJIKHLG", "MJIKLGH", "MJIKLHG", "MJILGHK", "MJILGKH", "MJILHGK", "MJILHKG", "MJILKGH", "MJILKHG", "MJKGHIL", "MJKGHLI", "MJKGIHL", _
		"MJKGILH", "MJKGLHI", "MJKGLIH", "MJKHGIL", "MJKHGLI", "MJKHIGL", "MJKHILG", "MJKHLGI", "MJKHLIG", "MJKIGHL", "MJKIGLH", "MJKIHGL", "MJKIHLG", "MJKILGH", "MJKILHG", _
		"MJKLGHI", "MJKLGIH", "MJKLHGI", "MJKLHIG", "MJKLIGH", "MJKLIHG", "MJLGHIK", "MJLGHKI", "MJLGIHK", "MJLGIKH", "MJLGKHI", "MJLGKIH", "MJLHGIK", "MJLHGKI", "MJLHIGK", _
		"MJLHIKG", "MJLHKGI", "MJLHKIG", "MJLIGHK", "MJLIGKH", "MJLIHGK", "MJLIHKG", "MJLIKGH", "MJLIKHG", "MJLKGHI", "MJLKGIH", "MJLKHGI", "MJLKHIG", "MJLKIGH", "MJLKIHG", _
		"MKGHIJL", "MKGHILJ", "MKGHJIL", "MKGHJLI", "MKGHLIJ", "MKGHLJI", "MKGIHJL", "MKGIHLJ", "MKGIJHL", "MKGIJLH", "MKGILHJ", "MKGILJH", "MKGJHIL", "MKGJHLI", "MKGJIHL", _
		"MKGJILH", "MKGJLHI", "MKGJLIH", "MKGLHIJ", "MKGLHJI", "MKGLIHJ", "MKGLIJH", "MKGLJHI", "MKGLJIH", "MKHGIJL", "MKHGILJ", "MKHGJIL", "MKHGJLI", "MKHGLIJ", "MKHGLJI", _
		"MKHIGJL", "MKHIGLJ", "MKHIJGL", "MKHIJLG", "MKHILGJ", "MKHILJG", "MKHJGIL", "MKHJGLI", "MKHJIGL", "MKHJILG", "MKHJLGI", "MKHJLIG", "MKHLGIJ", "MKHLGJI", "MKHLIGJ", _
		"MKHLIJG", "MKHLJGI", "MKHLJIG", "MKIGHJL", "MKIGHLJ", "MKIGJHL", "MKIGJLH", "MKIGLHJ", "MKIGLJH", "MKIHGJL", "MKIHGLJ", "MKIHJGL", "MKIHJLG", "MKIHLGJ", "MKIHLJG", _
		"MKIJGHL", "MKIJGLH", "MKIJHGL", "MKIJHLG", "MKIJLGH", "MKIJLHG", "MKILGHJ", "MKILGJH", "MKILHGJ", "MKILHJG", "MKILJGH", "MKILJHG", "MKJGHIL", "MKJGHLI", "MKJGIHL", _
		"MKJGILH", "MKJGLHI", "MKJGLIH", "MKJHGIL", "MKJHGLI", "MKJHIGL", "MKJHILG", "MKJHLGI", "MKJHLIG", "MKJIGHL", "MKJIGLH", "MKJIHGL", "MKJIHLG", "MKJILGH", "MKJILHG", _
		"MKJLGHI", "MKJLGIH", "MKJLHGI", "MKJLHIG", "MKJLIGH", "MKJLIHG", "MKLGHIJ", "MKLGHJI", "MKLGIHJ", "MKLGIJH", "MKLGJHI", "MKLGJIH", "MKLHGIJ", "MKLHGJI", "MKLHIGJ", _
		"MKLHIJG", "MKLHJGI", "MKLHJIG", "MKLIGHJ", "MKLIGJH", "MKLIHGJ", "MKLIHJG", "MKLIJGH", "MKLIJHG", "MKLJGHI", "MKLJGIH", "MKLJHGI", "MKLJHIG", "MKLJIGH", "MKLJIHG", _
		"MLGHIJK", "MLGHIKJ", "MLGHJIK", "MLGHJKI", "MLGHKIJ", "MLGHKJI", "MLGIHJK", "MLGIHKJ", "MLGIJHK", "MLGIJKH", "MLGIKHJ", "MLGIKJH", "MLGJHIK", "MLGJHKI", "MLGJIHK", _
		"MLGJIKH", "MLGJKHI", "MLGJKIH", "MLGKHIJ", "MLGKHJI", "MLGKIHJ", "MLGKIJH", "MLGKJHI", "MLGKJIH", "MLHGIJK", "MLHGIKJ", "MLHGJIK", "MLHGJKI", "MLHGKIJ", "MLHGKJI", _
		"MLHIGJK", "MLHIGKJ", "MLHIJGK", "MLHIJKG", "MLHIKGJ", "MLHIKJG", "MLHJGIK", "MLHJGKI", "MLHJIGK", "MLHJIKG", "MLHJKGI", "MLHJKIG", "MLHKGIJ", "MLHKGJI", "MLHKIGJ", _
		"MLHKIJG", "MLHKJGI", "MLHKJIG", "MLIGHJK", "MLIGHKJ", "MLIGJHK", "MLIGJKH", "MLIGKHJ", "MLIGKJH", "MLIHGJK", "MLIHGKJ", "MLIHJGK", "MLIHJKG", "MLIHKGJ", "MLIHKJG", _
		"MLIJGHK", "MLIJGKH", "MLIJHGK", "MLIJHKG", "MLIJKGH", "MLIJKHG", "MLIKGHJ", "MLIKGJH", "MLIKHGJ", "MLIKHJG", "MLIKJGH", "MLIKJHG", "MLJGHIK", "MLJGHKI", "MLJGIHK", _
		"MLJGIKH", "MLJGKHI", "MLJGKIH", "MLJHGIK", "MLJHGKI", "MLJHIGK", "MLJHIKG", "MLJHKGI", "MLJHKIG", "MLJIGHK", "MLJIGKH", "MLJIHGK", "MLJIHKG", "MLJIKGH", "MLJIKHG", _
		"MLJKGHI", "MLJKGIH", "MLJKHGI", "MLJKHIG", "MLJKIGH", "MLJKIHG", "MLKGHIJ", "MLKGHJI", "MLKGIHJ", "MLKGIJH", "MLKGJHI", "MLKGJIH", "MLKHGIJ", "MLKHGJI", "MLKHIGJ", _
		"MLKHIJG", "MLKHJGI", "MLKHJIG", "MLKIGHJ", "MLKIGJH", "MLKIHGJ", "MLKIHJG", "MLKIJGH", "MLKIJHG", "MLKJGHI", "MLKJGIH", "MLKJHGI", "MLKJHIG", "MLKJIGH", "MLKJIHG"]

Dim $aTableSuitIDcode[25] = ["25", _
		"HDSC", "HDCS", "HSDC", "HSCD", "HCDS", "HCSD", "DHSC", "DHCS", "DSHC", "DSCH", "DCHS", "DCSH", _
		"SHDC", "SHCD", "SDHC", "SDCH", "SCHD", "SCDH", "CHDS", "CHSD", "CDHS", "CDSH", "CSHD", "CSDH"]

Dim $aTableSuitIDalpha = ["25", _
		"A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", _
		"a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l"]

Dim $aTableSuitCardCode[14] = ["13", "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M"]

Dim $aTableSuitWeight[4][2] = [["C", "0"], ["D", "13"], ["H", "26"], ["S", "39"]]

Dim $aTableGenSuitCards[14] = [14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]

Func Solitaire_Decrypt_Process($sSolitaire_Chipher, $sPassPhrase)
	Local $csString, $number, $sPlainText
	$csString = StringSplit($sSolitaire_Chipher, "-", 2)
	$number = CardSwapDecode(StringMid($csString[1], 1, 5))
	If $number < 0 Then
		Return -1
	EndIf
	$nDeckNo = Asc(StringMid($csString[1], 6, 1)) - 64

	ConsoleWrite(@TAB & "Decoded Number  : " & $number & @CRLF)
	ConsoleWrite(@TAB & "Decoded Deck No : " & $nDeckNo & @CRLF)
	$Deck = GenerateDeck($number, $nDeckNo)
	$Deck = passPhrase_Shuffle($Deck, $sPassPhrase)
	$aKeyStream = keyStreamGenerate($Deck, StringLen($csString[0]))
;~ 	ConsoleWrite(_ArrayToString($aKeyStream, ",") & @CRLF)
	$sPlainText = Solitaire_Decrypt($aKeyStream, $csString[0])
	Return $sPlainText
EndFunc   ;==>Solitaire_Decrypt_Process

Func Solitaire_Encrypt_Process($number, $nDeckNo, $sPlainText, $sPassPhrase)
	Local $aKeyStream
	Local $csString
	Local $Deck

	$Deck = GenerateDeck($number, $nDeckNo)
	$csString = $Deck[0]

	$Deck = passPhrase_Shuffle($Deck, $sPassPhrase)

;~ 	KeyStream Generation

	$aKeyStream = keyStreamGenerate($Deck, StringLen($sPlainText))

	$sSolitaire_Chipher = Solitaire_Encrypt($aKeyStream, $sPlainText) & "-" & $csString
	Return $sSolitaire_Chipher
EndFunc   ;==>Solitaire_Encrypt_Process


Func GenerateDeck($number, $nDeckNo)
	Local $num1 = 0, $num2 = 0
	Local $tempA = 0, $tempB = 0
	Local $Deck
	Local $csString = CardSwapEncode($number)

	$number1 = StringFormat("%07i", $number)
	$num1 = Int(StringMid($number1, 1, 3))
	$num2 = Int(StringMid($number1, 4))

	$tempA = StringSplit($aTableDeckA[$num1], "", 2)
	$tempB = StringSplit($aTableDeckB[$num2], "", 2)

	For $i = 1 To 6
		$aTableGenSuitCards[$i] = $tempA[$i - 1]
	Next
	Local $j = 7
	For $i = 1 To 7
		$aTableGenSuitCards[$j] = $tempB[$i - 1]
		$j += 1
	Next

	$csString &= Chr($nDeckNo + 64)
	$aSuit = StringSplit($aTableSuitIDcode[$nDeckNo], "", 2)
	$j = 1

	For $i = 1 To 13

		$Deck &= _ArraySearch($aTableSuitCardCode, $aTableGenSuitCards[$j]) + $aTableSuitWeight[StringMid(_SearchMultiDimensional($aTableSuitWeight, $aSuit[0], False, False), 1, 1)][1] & ","
		$j += 1
		If $j = 14 Then $j = 1

		$Deck &= _ArraySearch($aTableSuitCardCode, $aTableGenSuitCards[$j]) + $aTableSuitWeight[StringMid(_SearchMultiDimensional($aTableSuitWeight, $aSuit[1], False, False), 1, 1)][1] & ","
		$j += 1
		If $j = 14 Then $j = 1

		$Deck &= _ArraySearch($aTableSuitCardCode, $aTableGenSuitCards[$j]) + $aTableSuitWeight[StringMid(_SearchMultiDimensional($aTableSuitWeight, $aSuit[2], False, False), 1, 1)][1] & ","
		$j += 1
		If $j = 14 Then $j = 1

		$Deck &= _ArraySearch($aTableSuitCardCode, $aTableGenSuitCards[$j]) + $aTableSuitWeight[StringMid(_SearchMultiDimensional($aTableSuitWeight, $aSuit[3], False, False), 1, 1)][1] & ","
		$j += 1
		If $j = 14 Then $j = 1
	Next

	$Deck = StringTrimRight($Deck, 1)
	$Deck = StringSplit($Deck, ",", 1)

	_ArrayInsert($Deck, SumOfDigits($num1), 53)

	If SumOfDigits($num2) <= 22 Then
		_ArrayInsert($Deck, 25 + SumOfDigits($num2), 54)
	ElseIf SumOfDigits($num2) + 4 <= 35 Then
		_ArrayInsert($Deck, 3 + SumOfDigits($num2), 54)
	Else
		Return 1
	EndIf
	$Deck[0] = $csString

	Return $Deck
EndFunc   ;==>GenerateDeck

Func SumOfDigits($number)
	Local $nString = ""
	Local $iLen = 0
	Local $Parity = ""
	$Parity = String($number)
	$nString = $Parity
	$Parity = 0
	$nString = StringSplit($nString, "")
	$iLen = $nString[0]
	For $i = 1 To $iLen
		$Parity += Int($nString[$i])
	Next
	Return $Parity
EndFunc   ;==>SumOfDigits


Func CardSwapDecode($csString)
	Local $aLookup
	Local $string1, $string2
	Local $ParityReturn
	Local $number

	If StringLen($csString) > 5 Then
		Return -1
	EndIf

	$string1 = StringSplit($csString, "")
	$ParityReturn = _ArraySearch($aTableAlpha, $string1[1], Default, Default, 1)
	If $ParityReturn > 15 Or $ParityReturn < 0 Then
		Return -2
	EndIf
	$string2 = StringSplit($aTableBin[$ParityReturn], "")
	Local $p1 = StringSplit($aTable100[$string2[1]][_ArraySearch($aTableAlpha, $string1[2], Default, Default, 1)], "", 2)
	Local $p2 = StringSplit($aTable100[$string2[2]][_ArraySearch($aTableAlpha, $string1[3], Default, Default, 1)], "", 2)
	Local $p3 = StringSplit($aTable100[$string2[3]][_ArraySearch($aTableAlpha, $string1[4], Default, Default, 1)], "", 2)
	Local $p4 = StringSplit($aTable100[$string2[4]][_ArraySearch($aTableAlpha, $string1[5], Default, Default, 1)], "", 2)

	$number = $p2[1] & $p4[1] & $p2[0] & $p4[0] & $p1[1] & $p3[1] & $p1[0]

	$aLookup = $number & $p3[0] ; Parity
	;execute check parity IFF the parity is even

	If Mod(Int($p3[0]), 2) == 1 Then ; when the parity is odd
		Return -3
	Else
		Local $checkParityReturn = checkParity(Int($aLookup))
	EndIf

	If $checkParityReturn == 1 Then
		Return $number
	Else
		Return -4
	EndIf

EndFunc   ;==>CardSwapDecode

Func CardSwapEncode($number)
	Dim $aLookup[8]
	$number = addParity($number)
	$number = String($number)
	$number = StringSplit($number, "", 2)
	$aLookup[0] = $number[6]
	$aLookup[1] = $number[4]
	$aLookup[2] = $number[2]
	$aLookup[3] = $number[0]
	$aLookup[4] = $number[7]
	$aLookup[5] = $number[5]
	$aLookup[6] = $number[3]
	$aLookup[7] = $number[1]
	Local $string1 = StringSplit(_SearchMultiDimensional($aTable100, $aLookup[0] & $aLookup[1], False, False), ",", 2)
	Local $string2 = StringSplit(_SearchMultiDimensional($aTable100, $aLookup[2] & $aLookup[3], False, False), ",", 2)
	Local $string3 = StringSplit(_SearchMultiDimensional($aTable100, $aLookup[4] & $aLookup[5], False, False), ",", 2)
	Local $string4 = StringSplit(_SearchMultiDimensional($aTable100, $aLookup[6] & $aLookup[7], False, False), ",", 2)
	Local $string5 = $string1[0] & $string2[0] & $string3[0] & $string4[0]

	Local $string6 = $aTableAlpha[_ArraySearch($aTableBin, $string5, Default, Default, 1)] & $aTableAlpha[$string1[1]] & $aTableAlpha[$string2[1]] & $aTableAlpha[$string3[1]] & $aTableAlpha[$string4[1]]
;~ 	ConsoleWrite($string6 & " : " & _ArraySearch($aTableBin, $string5, Default, Default, 1) & " : " & $aTableAlpha[_ArraySearch($aTableBin, $string5, Default, Default, 1)] & @CRLF)
	Return $string6
EndFunc   ;==>CardSwapEncode

Func addParity($number)
	Local $nString = ""
	Local $iLen = 0
	Local $Parity = ""
	$Parity = String($number)
	Do
		If StringLen(String($Parity)) > 1 Then
			$nString = String($Parity)
			$Parity = 0
			$nString = StringSplit($nString, "")
			$iLen = $nString[0]
			For $i = 1 To $iLen
				$Parity += Int($nString[$i])
			Next
		EndIf
	Until StringLen(String($Parity)) == 1
	If Mod($Parity, 2) == 1 Then
		$Parity -= 1 ; make the parity even
	EndIf
	Return String($number) & String($Parity)
EndFunc   ;==>addParity

Func checkParity($number)
	Local $nString = ""
	Local $iLen = 0
	Local $Parity = ""
	Local $originalParity = Mod($number, 10)
	$number = Floor($number / 10)
	$Parity = String($number)
	Do
		If StringLen(String($Parity)) > 1 Then
			$nString = String($Parity)
			$Parity = 0
			$nString = StringSplit($nString, "")
			$iLen = $nString[0]
			For $i = 1 To $iLen
				$Parity += Int($nString[$i])
			Next
		EndIf
	Until StringLen(String($Parity)) == 1
	If Mod($Parity, 2) == 1 Then
		$Parity -= 1 ; If odd make it even
	EndIf

	If $Parity == $originalParity Then
		Return 1
	Else
		Return -1
	EndIf
EndFunc   ;==>checkParity

Func move_Joker($Deck)
;~ 	If JokerA is at the bottom of the pack, then put it just below the top card
	Local $jokerA = _ArraySearch($Deck, 53, Default, Default, 1)
	If $jokerA == 54 Then
		_ArrayDelete($Deck, $jokerA)
		_ArrayInsert($Deck, 2, 53)
	Else
		$Deck[$jokerA] = $Deck[$jokerA + 1]
		$Deck[$jokerA + 1] = 53;"JokerA" ;swap the values
	EndIf
;~  If JokerB is just above the bottom card, then put it just below the top card. If it is the last card in the pack, then put it just below the second card
	Local $jokerB = _ArraySearch($Deck, 54, Default, Default, 0, Default, 0)
	Switch $jokerB
		Case $jokerB == 53
			_ArrayDelete($Deck, $jokerB)
			_ArrayInsert($Deck, 2, 54)
		Case $jokerB == 54
			_ArrayDelete($Deck, $jokerB)
			_ArrayInsert($Deck, 3, 54)
		Case Else
			$Deck[$jokerB] = $Deck[$jokerB + 1]
			$Deck[$jokerB + 1] = $Deck[$jokerB + 2]
			$Deck[$jokerB + 2] = 54
	EndSwitch
	Return $Deck
EndFunc   ;==>move_Joker

Func triple_cut($Deck)
	Dim $temp_Deck[55]
	Local $jokerA = _ArraySearch($Deck, 53)
	Local $i = 0, $j = 1
	Local $jokerB = _ArraySearch($Deck, 54)
	Local $jokerBpos = 0
;~ 	If JokerA or JokerB == 54 then Swap from 1 to Nearest Joker position -1 with the bottom part else two swaps as shown below
	If $jokerA == 54 Or $jokerB == 54 Then
		$jokerBpos = ($jokerA < $jokerB) ? $jokerA : $jokerB
		For $i = $jokerBpos To 54
			$temp_Deck[$j] = $Deck[$i]
			$j += 1
		Next
		For $i = 1 To $jokerBpos - 1
			$temp_Deck[$j] = $Deck[$i]
			$j += 1
		Next
	Else
		$jokerApos = ($jokerA < $jokerB) ? $jokerA : $jokerB
		$jokerBpos = ($jokerA < $jokerB) ? $jokerB : $jokerA
		For $i = $jokerBpos + 1 To 54
			$temp_Deck[$j] = $Deck[$i]
			$j += 1
		Next
		For $i = $jokerApos To $jokerBpos
			$temp_Deck[$j] = $Deck[$i]
			$j += 1
		Next
		For $i = 1 To $jokerApos - 1
			$temp_Deck[$j] = $Deck[$i]
			$j += 1
		Next
	EndIf
	$Deck = $temp_Deck
	Return $Deck
EndFunc   ;==>triple_cut

Func count_cut($Deck)
;~ 	If the bottom card is a joker, then do nothing
	Dim $temp_Deck[55]
	Local $last_Card = $Deck[54]
	Local $i = 0, $j = 1
	If $last_Card < 53 Then
		For $i = $last_Card + 1 To 53
			$temp_Deck[$j] = $Deck[$i]
			$j += 1
		Next
		For $i = 1 To $last_Card
			$temp_Deck[$j] = $Deck[$i]
			$j += 1
		Next
		$temp_Deck[54] = $Deck[54]
	EndIf
	$Deck = $temp_Deck
	Return $Deck
EndFunc   ;==>count_cut

Func passPhrase_Shuffle($Deck, $sPassPhrase)
;~ keep the last card as it is . convert every char of the passphrase into number , count the card and split. do it for the entire string.
	Dim $temp_Deck[55]
	Local $nPPLen = StringLen($sPassPhrase)
	Local $nPPLenCounter = 0, $i = 0, $j = 1
	Local $nCutPos = 0
	For $nPPLenCounter = 1 To $nPPLen
		$Deck = move_Joker($Deck)
		$Deck = triple_cut($Deck)
		$Deck = count_cut($Deck)
		$j = 1
		$nCutPos = Asc(StringMid($sPassPhrase, $nPPLenCounter, 1)) - 64
		For $i = $nCutPos + 1 To 53
			$temp_Deck[$j] = $Deck[$i]
			$j += 1
		Next
		For $i = 1 To $nCutPos
			$temp_Deck[$j] = $Deck[$i]
			$j += 1
		Next
		$temp_Deck[54] = $Deck[54]
		$Deck = $temp_Deck
	Next
	Return $Deck
EndFunc   ;==>passPhrase_Shuffle

Func keyStreamGenerate($Deck, $nPlainTextLen)
	Local $i = 0, $j = 0
	Dim $aKeyStream[$nPlainTextLen]
	Local $nFirstCard = 0
;~ Move Jokers
	For $i = 1 To $nPlainTextLen ;~ 	Loop untill the StringLen of the String to be encrypted
		$Deck = move_Joker($Deck)
		$Deck = triple_cut($Deck)
		$Deck = count_cut($Deck)
		$nFirstCard = ($Deck[1] == 54) ? 54 : $Deck[1] + 1
		Local $aKeyStreamAACII = ($Deck[$nFirstCard] > 26) ? $Deck[$nFirstCard] - 26 : $Deck[$nFirstCard]
		$aKeyStream[$j] = $aKeyStreamAACII
		$j += 1
;~ 	Output Card : Convert First Card to its numerical Value , Count down , read the value of the counted Card and store it in an Array
	Next
	Return $aKeyStream
EndFunc   ;==>keyStreamGenerate

Func Solitaire_Encrypt($aKeyStream, $sPlainText)
	Local $i = 0
	Local $nSum = 0
	Local $sSolitaire_Chipher = ""
	Local $nPlainTextLen = StringLen($sPlainText)
	$sPlainText = StringSplit($sPlainText, "", 2)
;~ 	ConsoleWrite("------------------------------" & @CRLF)
	For $i = 0 To $nPlainTextLen - 1
		$nSum = Asc($sPlainText[$i]) - 64 + $aKeyStream[$i]
;~ 		ConsoleWrite($nSum & " " & $sPlainText[$i] & " " & Asc($sPlainText[$i]) & " " & $aKeyStream[$i] & @CRLF)
		$sSolitaire_Chipher &= ($nSum > 26) ? Chr(($nSum - 26) + 64) : Chr($nSum + 64)
	Next
;~ 	ConsoleWrite("------------------------------" & @CRLF)
	Return $sSolitaire_Chipher
EndFunc   ;==>Solitaire_Encrypt

Func Solitaire_Decrypt($aKeyStream, $sSolitaire_Chipher)
	Local $i = 0
	Local $nSum = 0
	Local $sPlainText = ""
	Local $nCipherTextLen = StringLen($sSolitaire_Chipher)
	$sSolitaire_Chipher = StringSplit($sSolitaire_Chipher, "", 2)
	For $i = 0 To $nCipherTextLen - 1
		$nSum = Asc($sSolitaire_Chipher[$i]) - 64 - $aKeyStream[$i]
		$sPlainText &= ($nSum <= 0) ? Chr(($nSum + 26) + 64) : Chr($nSum + 64)
	Next
	Return $sPlainText
EndFunc   ;==>Solitaire_Decrypt
